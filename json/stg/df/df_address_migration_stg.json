{
    "name": "df_address_migration_stg",
    "properties": {
        "folder": {
            "name": "ccore-merge/stg"
        },
        "type": "MappingDataFlow",
        "typeProperties": {
            "sources": [
                {
                    "dataset": {
                        "referenceName": "ds_cntnr_na_address_stg",
                        "type": "DatasetReference"
                    },
                    "name": "NaAddress"
                },
                {
                    "dataset": {
                        "referenceName": "ds_cntnr_ca_address_stg",
                        "type": "DatasetReference"
                    },
                    "name": "CaAddress"
                },
                {
                    "dataset": {
                        "referenceName": "ds_cntnr_na_profiles_stg",
                        "type": "DatasetReference"
                    },
                    "name": "Profiles"
                }
            ],
            "sinks": [
                {
                    "dataset": {
                        "referenceName": "ds_cntnr_na_addresses_stg",
                        "type": "DatasetReference"
                    },
                    "name": "mergedAddress"
                }
            ],
            "transformations": [
                {
                    "name": "FilteredCaAddresses"
                },
                {
                    "name": "DerShippingBilling"
                },
                {
                    "name": "CaInnerJoinNa"
                },
                {
                    "name": "repCustCaID"
                },
                {
                    "name": "selectOnlyCaFields"
                },
                {
                    "name": "FilteredNaAddresses"
                },
                {
                    "name": "UnionExistAndDExist"
                }
            ],
            "scriptLines": [
                "source(output(",
                "          zipCode as string,",
                "          country as string,",
                "          city as string,",
                "          isFPO as boolean,",
                "          fullName as string,",
                "          defaultBilling as boolean,",
                "          customerId as string,",
                "          linkAddressId as integer,",
                "          addressLine1 as string,",
                "          addressLine3 as string,",
                "          state as string,",
                "          defaultShipping as boolean,",
                "          updateTs as integer,",
                "          email as string",
                "     ),",
                "     allowSchemaDrift: true,",
                "     validateSchema: false,",
                "     format: 'document') ~> NaAddress",
                "source(output(",
                "          zipCode as string,",
                "          country as string,",
                "          city as string,",
                "          addressType as string,",
                "          isFPO as boolean,",
                "          fullName as string,",
                "          defaultBilling as boolean,",
                "          stateName as string,",
                "          customerId as string,",
                "          addressLine1 as string,",
                "          addressLine2 as string,",
                "          addressLine3 as string,",
                "          state as string,",
                "          countryName as string,",
                "          defaultShipping as boolean,",
                "          updateTs as integer,",
                "          email as string,",
                "          linkAddressId as integer,",
                "          phone as string",
                "     ),",
                "     allowSchemaDrift: true,",
                "     validateSchema: false,",
                "     format: 'document') ~> CaAddress",
                "source(output(",
                "          bannerOfOrigin as string,",
                "          billAddressLine1 as string,",
                "          billingAddress as (addressLine1 as string, addressLine2 as string, addressLine3 as string, city as string, country as string, created as long, fullName as string, state as string, zipCode as integer),",
                "          changedBy as string,",
                "          changedFields as string,",
                "          country as string,",
                "          created as long,",
                "          createdBy as string,",
                "          csaInfo as (csaAgentEmail as string, zendeskTicketNumber as string),",
                "          customerFlag as string,",
                "          customerId as string,",
                "          customerSyncStatus as (process as string, updateTs as string, status as string),",
                "          email as string,",
                "          emailHistory as (emailAddress as string, modificationTS as string)[],",
                "          emailVerified as long,",
                "          event as string,",
                "          failedLoginAttempts as string,",
                "          firstName as string,",
                "          flxInfo as (ctNumber as integer, flxEmailOptIn as boolean, flxNumber as long, flxTcVersion as short, loyaltyFlxEmailOptInBanner as string, loyaltyStatus as boolean, points as short, referralCode as string, tier as string),",
                "          fraudFlag as string[],",
                "          homeNumber as long,",
                "          inStoreSignUp as boolean,",
                "          isRegistered as boolean,",
                "          janrainUuid as string,",
                "          lastFailedLogin as string,",
                "          lastLogin as long,",
                "          lastName as string,",
                "          lastOrderDate as long,",
                "          militaryExpiryDate as string,",
                "          militaryRequestId as string,",
                "          militaryStatus as boolean,",
                "          mobileNumber as long,",
                "          oldCsCid as integer,",
                "          oldEbCid as string,",
                "          oldFaCid as string,",
                "          oldFlCid as string,",
                "          oldFlcaCid as string,",
                "          oldFsCid as string,",
                "          oldKflCid as string,",
                "          oldLflCid as string,",
                "          optIns as (banner as string)[],",
                "          password as string,",
                "          passwordChangeDate as string,",
                "          preferredLanguage as string,",
                "          previousEmail as string,",
                "          profileStatus as string,",
                "          region as string,",
                "          relateFailure as boolean,",
                "          schDefaultBillingAddressLine1 as string,",
                "          schDefaultShippingAddressLine1 as string,",
                "          shipAddressLine1 as string,",
                "          shippingAddress as (addressLine1 as string, addressLine2 as string, addressLine3 as string, city as string, country as string, created as long, fullName as string, state as string, zipCode as integer),",
                "          storeNumber as short,",
                "          token as string,",
                "          updateTs as long,",
                "          updateTsExceptLogin as long,",
                "          vipInfo as (dollarsNeedToSpend as (currencyIso as string, formattedValue as string, value as string), loyaltyMinThreshold as (currencyIso as string, formattedValue as string, value as string), isVip as string, loyaltyExpireDate as string, vipNumber as string, loyaltyTargetThreshold as (currencyIso as string, formattedValue as string, value as string), lifeTimePoints as string, dollarsSpent as (currencyIso as string, formattedValue as string, value as string), status as string, lastLevelMoveDate as string, lastLevelUpdateDateHyb as string),",
                "          webhookMessageStatus as string,",
                "          xstoreId as string,",
                "          zipCode as string",
                "     ),",
                "     allowSchemaDrift: true,",
                "     validateSchema: false,",
                "     format: 'document') ~> Profiles",
                "CaAddress, Profiles exists(CaAddress@email == Profiles@email,",
                "     negate:false,",
                "     broadcast: 'auto')~> FilteredCaAddresses",
                "FilteredCaAddresses derive(defaultShipping = toBoolean('false'),",
                "          defaultBilling = toBoolean('false')) ~> DerShippingBilling",
                "DerShippingBilling, Profiles join(equals(CaAddress@email, Profiles@email),",
                "     joinType:'cross',",
                "     matchType:'exact',",
                "     ignoreSpaces: false,",
                "     broadcast: 'auto')~> CaInnerJoinNa",
                "CaInnerJoinNa derive(customerId = Profiles@customerId) ~> repCustCaID",
                "repCustCaID select(mapColumn(",
                "          zipCode = CaAddress@zipCode,",
                "          country = CaAddress@country,",
                "          city,",
                "          addressType,",
                "          isFPO,",
                "          fullName,",
                "          defaultBilling,",
                "          stateName,",
                "          customerId,",
                "          addressLine1,",
                "          addressLine2,",
                "          addressLine3,",
                "          state,",
                "          countryName,",
                "          defaultShipping,",
                "          updateTs = CaAddress@updateTs,",
                "          email = CaAddress@email,",
                "          linkAddressId,",
                "          phone",
                "     ),",
                "     skipDuplicateMapInputs: true,",
                "     skipDuplicateMapOutputs: true) ~> selectOnlyCaFields",
                "NaAddress, Profiles exists(NaAddress@email ==Profiles@email,",
                "     negate:false,",
                "     broadcast: 'auto')~> FilteredNaAddresses",
                "FilteredNaAddresses, selectOnlyCaFields union(byName: true)~> UnionExistAndDExist",
                "UnionExistAndDExist sink(allowSchemaDrift: true,",
                "     validateSchema: false,",
                "     deletable:false,",
                "     insertable:true,",
                "     updateable:false,",
                "     upsertable:false,",
                "     recreate:true,",
                "     format: 'document',",
                "     batchSize: 25000,",
                "     partitionKey: ['/email'],",
                "     throughput: 50000,",
                "     skipDuplicateMapInputs: true,",
                "     skipDuplicateMapOutputs: true) ~> mergedAddress"
            ]
        }
    }
}