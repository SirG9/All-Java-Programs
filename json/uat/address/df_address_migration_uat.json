{
  "name": "df_address_migration_uat",
  "properties": {
    "folder": {
      "name": "ccore/TDATA-4433/uat"
    },
    "type": "MappingDataFlow",
    "typeProperties": {
      "sources": [
        {
          "dataset": {
            "referenceName": "ds_cntnr_na_address_uat",
            "type": "DatasetReference"
          },
          "name": "NaAddress"
        },
        {
          "dataset": {
            "referenceName": "ds_cntnr_na_profiles_uat",
            "type": "DatasetReference"
          },
          "name": "GlobalProfile"
        },
        {
          "dataset": {
            "referenceName": "ds_cntnr_ca_address_uat",
            "type": "DatasetReference"
          },
          "name": "CaAddress"
        }
      ],
      "sinks": [
        {
          "dataset": {
            "referenceName": "ds_cntnr_na_addresses_uat",
            "type": "DatasetReference"
          },
          "name": "GlobalAddress"
        }
      ],
      "transformations": [
        {
          "name": "FilteredNaAddresses"
        },
        {
          "name": "FilteredCaAddresses"
        },
        {
          "name": "UnionExistAndDExist"
        },
        {
          "name": "DerShippingBilling"
        },
        {
          "name": "CaInnerJoinNa"
        },
        {
          "name": "repCustCaID"
        },
        {
          "name": "selectOnlyCaFields"
        }
      ],
      "scriptLines": [
        "source(output(",
        "          addressLine1 as string,",
        "          addressLine2 as string,",
        "          addressLine3 as string,",
        "          addressType as string,",
        "          city as string,",
        "          country as string,",
        "          countryName as string,",
        "          customerId as string,",
        "          defaultBilling as boolean,",
        "          defaultShipping as boolean,",
        "          email as string,",
        "          firstName as string,",
        "          fullName as string,",
        "          id as string,",
        "          isFPO as boolean,",
        "          lastName as string,",
        "          linkAddressId as long,",
        "          phone as string,",
        "          regionFPO as string,",
        "          satoriValidated as boolean,",
        "          state as string,",
        "          stateName as string,",
        "          updateTs as long,",
        "          zipCode as string",
        "     ),",
        "     allowSchemaDrift: true,",
        "     validateSchema: false,",
        "     query: 'select c.id, c.addressLine1, c.addressLine2, c.addressLine3, c.addressType, c.city, c.country, c.countryName, c.customerId, c.defaultBilling, c.defaultShipping, c.email, c.firstName, c.fullName, c.isFPO, c.lastName, c.linkAddressId, c.phone, c.regionFPO, c.satoriValidated, c.state, c.stateName, c.updateTs, c.zipCode from c',",
        "     format: 'documentQuery',",
        "     systemColumns: false) ~> NaAddress",
        "source(output(",
        "          customerId as string,",
        "          email as string",
        "     ),",
        "     allowSchemaDrift: true,",
        "     validateSchema: false,",
        "     format: 'document') ~> GlobalProfile",
        "source(output(",
        "          addressLine1 as string,",
        "          addressLine2 as string,",
        "          addressLine3 as string,",
        "          addressType as string,",
        "          city as string,",
        "          country as string,",
        "          countryName as string,",
        "          customerId as string,",
        "          defaultBilling as boolean,",
        "          defaultShipping as boolean,",
        "          email as string,",
        "          firstName as string,",
        "          fullName as string,",
        "          id as string,",
        "          isFPO as boolean,",
        "          lastName as string,",
        "          linkAddressId as long,",
        "          phone as string,",
        "          regionFPO as string,",
        "          satoriValidated as boolean,",
        "          state as string,",
        "          stateName as string,",
        "          updateTs as long,",
        "          zipCode as string",
        "     ),",
        "     allowSchemaDrift: true,",
        "     validateSchema: false,",
        "     query: 'select c.id, c.addressLine1, c.addressLine2, c.addressLine3, c.addressType, c.city, c.country, c.countryName, c.customerId, c.defaultBilling, c.defaultShipping, c.email, c.firstName, c.fullName, c.isFPO, c.lastName, c.linkAddressId, c.phone, c.regionFPO, c.satoriValidated, c.state, c.stateName, c.updateTs, c.zipCode from c',",
        "     format: 'documentQuery',",
        "     systemColumns: false) ~> CaAddress",
        "NaAddress, GlobalProfile exists(NaAddress@email ==GlobalProfile@email,",
        "     negate:false,",
        "     broadcast: 'auto')~> FilteredNaAddresses",
        "CaAddress, GlobalProfile exists(CaAddress@email == GlobalProfile@email,",
        "     negate:false,",
        "     broadcast: 'auto')~> FilteredCaAddresses",
        "FilteredNaAddresses, selectOnlyCaFields union(byName: true)~> UnionExistAndDExist",
        "FilteredCaAddresses derive(defaultShipping = toBoolean('false'),",
        "          defaultBilling = toBoolean('false')) ~> DerShippingBilling",
        "DerShippingBilling, GlobalProfile join(equals(CaAddress@email, GlobalProfile@email),",
        "     joinType:'cross',",
        "     matchType:'exact',",
        "     ignoreSpaces: false,",
        "     broadcast: 'auto')~> CaInnerJoinNa",
        "CaInnerJoinNa derive(customerId = GlobalProfile@customerId) ~> repCustCaID",
        "repCustCaID select(mapColumn(",
        "          addressLine1,",
        "          addressLine2,",
        "          addressLine3,",
        "          addressType,",
        "          city,",
        "          country,",
        "          countryName,",
        "          customerId,",
        "          defaultBilling,",
        "          defaultShipping,",
        "          email = CaAddress@email,",
        "          firstName,",
        "          fullName,",
        "          id,",
        "          isFPO,",
        "          lastName,",
        "          linkAddressId,",
        "          phone,",
        "          regionFPO,",
        "          satoriValidated,",
        "          state,",
        "          stateName,",
        "          updateTs,",
        "          zipCode",
        "     ),",
        "     skipDuplicateMapInputs: true,",
        "     skipDuplicateMapOutputs: true) ~> selectOnlyCaFields",
        "UnionExistAndDExist sink(allowSchemaDrift: true,",
        "     validateSchema: false,",
        "     input(",
        "          addressLine1 as string,",
        "          addressLine2 as string,",
        "          addressLine3 as string,",
        "          addressType as string,",
        "          city as string,",
        "          country as string,",
        "          countryName as string,",
        "          customerId as string,",
        "          defaultBilling as boolean,",
        "          defaultShipping as boolean,",
        "          email as string,",
        "          firstName as string,",
        "          fullName as string,",
        "          isFPO as boolean,",
        "          lastName as string,",
        "          linkAddressId as long,",
        "          phone as string,",
        "          regionFPO as string,",
        "          satoriValidated as boolean,",
        "          state as string,",
        "          stateName as string,",
        "          updateTs as long,",
        "          zipCode as string",
        "     ),",
        "     deletable:false,",
        "     insertable:true,",
        "     updateable:false,",
        "     upsertable:false,",
        "     recreate:true,",
        "     format: 'document',",
        "     batchSize: 5000,",
        "     partitionKey: ['/email'],",
        "     throughput: 10000,",
        "     skipDuplicateMapInputs: true,",
        "     skipDuplicateMapOutputs: true) ~> GlobalAddress"
      ]
    }
  }
}