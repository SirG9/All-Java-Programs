{
  "name": "df_profiles_migration_uat",
  "properties": {
    "folder": {
      "name": "ccore/TDATA-4433/uat"
    },
    "type": "MappingDataFlow",
    "typeProperties": {
      "sources": [
        {
          "dataset": {
            "referenceName": "ds_cntnr_na_profile_uat",
            "type": "DatasetReference"
          },
          "name": "NaProfile"
        },
        {
          "dataset": {
            "referenceName": "ds_cntnr_ca_profile_uat",
            "type": "DatasetReference"
          },
          "name": "CaProfile"
        },
        {
          "dataset": {
            "referenceName": "ds_cntnr_na_profiles_eliminated_uat",
            "type": "DatasetReference"
          },
          "name": "naEliminatedProfiles"
        },
        {
          "dataset": {
            "referenceName": "ds_cntnr_ca_profiles_eliminated_uat",
            "type": "DatasetReference"
          },
          "name": "caEliminatedProfiles"
        }
      ],
      "sinks": [
        {
          "dataset": {
            "referenceName": "ds_cntnr_na_profiles_uat",
            "type": "DatasetReference"
          },
          "name": "SinkGlobalProfile"
        },
        {
          "dataset": {
            "referenceName": "ds_cntnr_na_profiles_retained_uat",
            "type": "DatasetReference"
          },
          "name": "SinkNaProfileRetained"
        },
        {
          "dataset": {
            "referenceName": "ds_cntnr_ca_profiles_retained_uat",
            "type": "DatasetReference"
          },
          "name": "SinkCaProfileRetained"
        }
      ],
      "transformations": [
        {
          "name": "NaUnionCaRetainedProfiles"
        },
        {
          "name": "RemoveDuplicateProfilesBasedOnEmails"
        },
        {
          "name": "SelectPrefLangAndVipinfoFromCa"
        },
        {
          "name": "NaJoinCaWithLeftOuter"
        },
        {
          "name": "derivePrefLangAndVipInfo"
        },
        {
          "name": "removeCaColumns"
        },
        {
          "name": "SelectCaRetainedProfiles"
        },
        {
          "name": "NaRetainedProfiles"
        },
        {
          "name": "CaRetainedProfiles"
        },
        {
          "name": "CaRetainedProfilesDoesNotExistsInNaRetainedProfiles"
        },
        {
          "name": "derivedNaRegionAndCountry"
        },
        {
          "name": "derivedCaRegionAndCountry"
        }
      ],
      "scriptLines": [
        "source(output(",
        "          updateTs as long,",
        "          firstName as string,",
        "          lastName as string,",
        "          email as string,",
        "          profileStatus as string,",
        "          token as string,",
        "          emailHistory as (emailAddress as string, modificationTS as string)[],",
        "          customerId as string,",
        "          preferredStores as (CS as (city as string, country as string, division as string, isocodeShort as string, latitude as string, line1 as string, line2 as string, longitude as string, name as string, phone as string, state as string, status as string, storeId as string, zipcode as string), FA as (city as string, country as string, division as string, isocodeShort as string, latitude as string, line1 as string, line2 as string, longitude as string, name as string, phone as string, state as string, status as string, storeId as string, zipcode as string), FL as (city as string, country as string, division as string, isocodeShort as string, latitude as string, line1 as string, line2 as string, longitude as string, name as string, phone as string, state as string, status as string, storeId as string, zipcode as string), KFL as (city as string, country as string, division as string, isocodeShort as string, latitude as string, line1 as string, line2 as string, longitude as string, name as string, phone as string, state as string, status as string, storeId as string, zipcode as string)),",
        "          mobileNumber as long,",
        "          homeNumber as string,",
        "          isRegistered as boolean,",
        "          zipCode as string,",
        "          schDefaultBillingAddressLine1 as string,",
        "          schDefaultShippingAddressLine1 as string,",
        "          region as string,",
        "          webhookMessageStatus as string,",
        "          janrainUuid as string,",
        "          oldFlCid as string,",
        "          oldKflCid as string,",
        "          oldLflCid as string,",
        "          oldFsCid as string,",
        "          oldFaCid as string,",
        "          oldCsCid as string,",
        "          oldFlcaCid as string,",
        "          oldEbCid as string,",
        "          fraudFlag as string[],",
        "          bannerOfOrigin as string,",
        "          emailVerified as long,",
        "          militaryStatus as string,",
        "          militaryRequestId as string,",
        "          militaryExpiryDate as string,",
        "          storeNumber as string,",
        "          previousEmail as string,",
        "          password as string,",
        "          flxInfo as (flxEmailOptIn as boolean, loyaltyFlxEmailOptInBanner as string, loyaltyStatus as boolean, points as integer, tier as string, flxNumber as integer, ctNumber as integer, flxTcVersion as string, referralCode as string),",
        "          optIns as (banner as string)[],",
        "          created as long,",
        "          birthday as string,",
        "          inStoreSignUp as boolean,",
        "          createdBy as string,",
        "          xstoreId as string,",
        "          retailStoreId as integer,",
        "          relateFailure as boolean,",
        "          changedFields as string,",
        "          csaInfo as (csaAgentEmail as string, zendeskTicketNumber as string),",
        "          customerFlag as string,",
        "          event as string,",
        "          changedBy as string,",
        "          vipInfo as (dollarsNeedToSpend as (currencyIso as string, formattedValue as string, value as integer), loyaltyMinThreshold as (currencyIso as string, formattedValue as string, value as integer), dollarsSpent as (currencyIso as string, formattedValue as string, value as integer), loyaltyTargetThreshold as (currencyIso as string, formattedValue as string, value as integer), vipNumber as string, lastLevelUpdateDateHyb as long, lastLevelMoveDate as long, loyaltyExpireDate as long, isVip as boolean, lifeTimePoints as long, status as string),",
        "          preferredLanguage as string,",
        "          lastLogin as string,",
        "          lastFailedLogin as string,",
        "          passwordChangeDate as string,",
        "          failedLoginAttempts as long,",
        "          streetAddress as string,",
        "          country as string,",
        "          gender as string,",
        "          customerSyncStatus as (status as string, updateTs as long, process as string),",
        "          updateTsExceptLogin as long,",
        "          relateCustomerId as string",
        "     ),",
        "     allowSchemaDrift: true,",
        "     validateSchema: false,",
        "     format: 'document',",
        "     systemColumns: true) ~> NaProfile",
        "source(output(",
        "          updateTs as long,",
        "          firstName as string,",
        "          lastName as string,",
        "          email as string,",
        "          profileStatus as string,",
        "          token as string,",
        "          emailHistory as (emailAddress as string, modificationTS as string)[],",
        "          customerId as string,",
        "          preferredStores as (CS as (city as string, country as string, division as string, isocodeShort as string, latitude as string, line1 as string, line2 as string, longitude as string, name as string, phone as string, state as string, status as string, storeId as string, zipcode as string), FA as (city as string, country as string, division as string, isocodeShort as string, latitude as string, line1 as string, line2 as string, longitude as string, name as string, phone as string, state as string, status as string, storeId as string, zipcode as string), FL as (city as string, country as string, division as string, isocodeShort as string, latitude as string, line1 as string, line2 as string, longitude as string, name as string, phone as string, state as string, status as string, storeId as string, zipcode as string), KFL as (city as string, country as string, division as string, isocodeShort as string, latitude as string, line1 as string, line2 as string, longitude as string, name as string, phone as string, state as string, status as string, storeId as string, zipcode as string)),",
        "          mobileNumber as long,",
        "          homeNumber as string,",
        "          isRegistered as boolean,",
        "          zipCode as string,",
        "          schDefaultBillingAddressLine1 as string,",
        "          schDefaultShippingAddressLine1 as string,",
        "          region as string,",
        "          webhookMessageStatus as string,",
        "          janrainUuid as string,",
        "          oldFlCid as string,",
        "          oldKflCid as string,",
        "          oldLflCid as string,",
        "          oldFsCid as string,",
        "          oldFaCid as string,",
        "          oldCsCid as string,",
        "          oldFlcaCid as string,",
        "          oldEbCid as string,",
        "          fraudFlag as string[],",
        "          bannerOfOrigin as string,",
        "          emailVerified as long,",
        "          militaryStatus as string,",
        "          militaryRequestId as string,",
        "          militaryExpiryDate as string,",
        "          storeNumber as string,",
        "          previousEmail as string,",
        "          password as string,",
        "          flxInfo as (flxEmailOptIn as boolean, loyaltyFlxEmailOptInBanner as string, loyaltyStatus as boolean, points as integer, tier as string, flxNumber as integer, ctNumber as integer, flxTcVersion as string, referralCode as string),",
        "          optIns as (banner as string)[],",
        "          created as long,",
        "          birthday as string,",
        "          inStoreSignUp as boolean,",
        "          createdBy as string,",
        "          xstoreId as string,",
        "          retailStoreId as integer,",
        "          relateFailure as boolean,",
        "          changedFields as string,",
        "          csaInfo as (csaAgentEmail as string, zendeskTicketNumber as string),",
        "          customerFlag as string,",
        "          event as string,",
        "          changedBy as string,",
        "          vipInfo as (dollarsNeedToSpend as (currencyIso as string, formattedValue as string, value as integer), loyaltyMinThreshold as (currencyIso as string, formattedValue as string, value as integer), dollarsSpent as (currencyIso as string, formattedValue as string, value as integer), loyaltyTargetThreshold as (currencyIso as string, formattedValue as string, value as integer), vipNumber as string, lastLevelUpdateDateHyb as long, lastLevelMoveDate as long, loyaltyExpireDate as long, isVip as boolean, lifeTimePoints as long, status as string),",
        "          preferredLanguage as string,",
        "          lastLogin as string,",
        "          lastFailedLogin as string,",
        "          passwordChangeDate as string,",
        "          failedLoginAttempts as long,",
        "          streetAddress as string,",
        "          country as string,",
        "          gender as string,",
        "          customerSyncStatus as (status as string, updateTs as long, process as string),",
        "          updateTsExceptLogin as long,",
        "          relateCustomerId as string",
        "     ),",
        "     allowSchemaDrift: true,",
        "     validateSchema: false,",
        "     format: 'document',",
        "     systemColumns: true) ~> CaProfile",
        "source(output(",
        "          bannerOfOrigin as string,",
        "          created as long,",
        "          customerId as string,",
        "          eliminationReason as string,",
        "          email as string,",
        "          isRegistered as boolean,",
        "          janrainUuid as string,",
        "          lastLogin as string",
        "     ),",
        "     allowSchemaDrift: true,",
        "     validateSchema: false,",
        "     format: 'document') ~> naEliminatedProfiles",
        "source(output(",
        "          bannerOfOrigin as string,",
        "          created as long,",
        "          customerId as string,",
        "          eliminationReason as string,",
        "          email as string,",
        "          emailVerified as long,",
        "          isRegistered as boolean,",
        "          janrainUuid as string,",
        "          lastLogin as string",
        "     ),",
        "     allowSchemaDrift: true,",
        "     validateSchema: false,",
        "     format: 'document') ~> caEliminatedProfiles",
        "NaRetainedProfiles, SelectCaRetainedProfiles union(byName: true)~> NaUnionCaRetainedProfiles",
        "NaUnionCaRetainedProfiles aggregate(groupBy(email),",
        "     each(match(name!='email'), $$ = first($$))) ~> RemoveDuplicateProfilesBasedOnEmails",
        "SelectCaRetainedProfiles select(mapColumn(",
        "          email,",
        "          preferredLanguage,",
        "          vipInfo",
        "     ),",
        "     skipDuplicateMapInputs: true,",
        "     skipDuplicateMapOutputs: true) ~> SelectPrefLangAndVipinfoFromCa",
        "RemoveDuplicateProfilesBasedOnEmails, SelectPrefLangAndVipinfoFromCa join(RemoveDuplicateProfilesBasedOnEmails@email == SelectPrefLangAndVipinfoFromCa@email,",
        "     joinType:'left',",
        "     matchType:'exact',",
        "     ignoreSpaces: false,",
        "     broadcast: 'auto')~> NaJoinCaWithLeftOuter",
        "NaJoinCaWithLeftOuter derive(preferredLanguage = iif(equalsIgnoreCase(SelectPrefLangAndVipinfoFromCa@preferredLanguage, 'fr'), 'fr', 'en'),",
        "          vipInfo = iif(isNull(SelectPrefLangAndVipinfoFromCa@vipInfo), RemoveDuplicateProfilesBasedOnEmails@vipInfo, SelectPrefLangAndVipinfoFromCa@vipInfo)) ~> derivePrefLangAndVipInfo",
        "derivePrefLangAndVipInfo select(mapColumn(",
        "          email = RemoveDuplicateProfilesBasedOnEmails@email,",
        "          updateTs,",
        "          firstName,",
        "          lastName,",
        "          profileStatus,",
        "          token,",
        "          emailHistory,",
        "          customerId,",
        "          preferredStores,",
        "          mobileNumber,",
        "          homeNumber,",
        "          isRegistered,",
        "          zipCode,",
        "          schDefaultBillingAddressLine1,",
        "          schDefaultShippingAddressLine1,",
        "          region,",
        "          webhookMessageStatus,",
        "          janrainUuid,",
        "          oldFlCid,",
        "          oldKflCid,",
        "          oldLflCid,",
        "          oldFsCid,",
        "          oldFaCid,",
        "          oldCsCid,",
        "          oldFlcaCid,",
        "          oldEbCid,",
        "          fraudFlag,",
        "          bannerOfOrigin,",
        "          emailVerified,",
        "          militaryStatus,",
        "          militaryRequestId,",
        "          militaryExpiryDate,",
        "          storeNumber,",
        "          previousEmail,",
        "          password,",
        "          flxInfo,",
        "          optIns,",
        "          created,",
        "          birthday,",
        "          inStoreSignUp,",
        "          createdBy,",
        "          xstoreId,",
        "          retailStoreId,",
        "          relateFailure,",
        "          changedFields,",
        "          csaInfo,",
        "          customerFlag,",
        "          event,",
        "          changedBy,",
        "          vipInfo,",
        "          preferredLanguage,",
        "          lastLogin,",
        "          lastFailedLogin,",
        "          passwordChangeDate,",
        "          failedLoginAttempts,",
        "          streetAddress,",
        "          country,",
        "          gender,",
        "          customerSyncStatus,",
        "          updateTsExceptLogin,",
        "          relateCustomerId,",
        "          id",
        "     ),",
        "     skipDuplicateMapInputs: true,",
        "     skipDuplicateMapOutputs: true) ~> removeCaColumns",
        "CaRetainedProfiles select(skipDuplicateMapInputs: true,",
        "     skipDuplicateMapOutputs: true) ~> SelectCaRetainedProfiles",
        "derivedNaRegionAndCountry, naEliminatedProfiles exists(NaProfile@email == naEliminatedProfiles@email,",
        "     negate:true,",
        "     broadcast: 'auto')~> NaRetainedProfiles",
        "derivedCaRegionAndCountry, caEliminatedProfiles exists(CaProfile@email == caEliminatedProfiles@email,",
        "     negate:true,",
        "     broadcast: 'auto')~> CaRetainedProfiles",
        "CaRetainedProfiles, NaRetainedProfiles exists(CaProfile@email == NaProfile@email,",
        "     negate:true,",
        "     broadcast: 'auto')~> CaRetainedProfilesDoesNotExistsInNaRetainedProfiles",
        "NaProfile derive(region = iif(or(isNull(region),equalsIgnoreCase(region, '')), \"US\", region),",
        "          country = iif(or(isNull(country),equalsIgnoreCase(country, '')), \"US\", country)) ~> derivedNaRegionAndCountry",
        "CaProfile derive(region = iif(or(isNull(region),equalsIgnoreCase(region, '')), \"CA\", region),",
        "          country = iif(or(isNull(country),equalsIgnoreCase(country, '')), \"CA\", country)) ~> derivedCaRegionAndCountry",
        "removeCaColumns sink(allowSchemaDrift: true,",
        "     validateSchema: false,",
        "     deletable:false,",
        "     insertable:true,",
        "     updateable:false,",
        "     upsertable:false,",
        "     recreate:true,",
        "     format: 'document',",
        "     batchSize: 5000,",
        "     partitionKey: ['/id'],",
        "     throughput: 10000,",
        "     skipDuplicateMapInputs: true,",
        "     skipDuplicateMapOutputs: true) ~> SinkGlobalProfile",
        "NaRetainedProfiles sink(allowSchemaDrift: true,",
        "     validateSchema: false,",
        "     deletable:false,",
        "     insertable:true,",
        "     updateable:false,",
        "     upsertable:false,",
        "     recreate:true,",
        "     format: 'document',",
        "     batchSize: 5000,",
        "     partitionKey: ['/id'],",
        "     throughput: 10000,",
        "     skipDuplicateMapInputs: true,",
        "     skipDuplicateMapOutputs: true) ~> SinkNaProfileRetained",
        "CaRetainedProfilesDoesNotExistsInNaRetainedProfiles sink(allowSchemaDrift: true,",
        "     validateSchema: false,",
        "     deletable:false,",
        "     insertable:true,",
        "     updateable:false,",
        "     upsertable:false,",
        "     recreate:true,",
        "     format: 'document',",
        "     batchSize: 5000,",
        "     partitionKey: ['/id'],",
        "     throughput: 10000,",
        "     skipDuplicateMapInputs: true,",
        "     skipDuplicateMapOutputs: true) ~> SinkCaProfileRetained"
      ]
    }
  }
}