{
  "name": "df_count_na_ca_profiles",
  "properties": {
    "folder": {
      "name": "ccore/TDATA-4391/uat/container"
    },
    "type": "MappingDataFlow",
    "typeProperties": {
      "sources": [
        {
          "dataset": {
            "referenceName": "ds_count_eliminated_profiles_uat",
            "type": "DatasetReference"
          },
          "name": "Profiles"
        },
        {
          "dataset": {
            "referenceName": "ds_cntnr_ca_profile_uat",
            "type": "DatasetReference"
          },
          "name": "caProfiles"
        },
        {
          "dataset": {
            "referenceName": "ds_na_profiles",
            "type": "DatasetReference"
          },
          "name": "RandomSourceToGenerateNewCosmosCollection"
        },
        {
          "dataset": {
            "referenceName": "ds_cntnr_na_profile_uat",
            "type": "DatasetReference"
          },
          "name": "ProfileNa"
        },
        {
          "dataset": {
            "referenceName": "ds_cntnr_ca_profile_uat",
            "type": "DatasetReference"
          },
          "name": "profileCA"
        }
      ],
      "sinks": [
        {
          "name": "CacheCountCaEliProfiles"
        },
        {
          "name": "CacheCountNaEliProfiles"
        },
        {
          "name": "sinkNotVIP"
        },
        {
          "name": "sinkVip"
        },
        {
          "name": "sinkPlatinumVip"
        },
        {
          "name": "sinkVipGT500"
        },
        {
          "name": "sinkVipLT300"
        },
        {
          "name": "sinkVip300to499"
        },
        {
          "dataset": {
            "referenceName": "ds_cntnr_na_profiles_count_result_uat",
            "type": "DatasetReference"
          },
          "name": "sinkProfilesCount"
        },
        {
          "name": "CacheSinkNaProfiles"
        },
        {
          "name": "CacheSinkCaProfiles"
        },
        {
          "name": "CacheSinkNaRetainedProfiles"
        },
        {
          "name": "CacheSinkCommonProfiles"
        },
        {
          "name": "CacheSinkCaRetainedProfiles"
        },
        {
          "name": "CacheSinkGlobalProfiles"
        }
      ],
      "transformations": [
        {
          "name": "filterCaEliminatedProfiles"
        },
        {
          "name": "CountCaElimiatedProfiles"
        },
        {
          "name": "filterNaEliminatedProfiles"
        },
        {
          "name": "CountNaElimiatedProfiles"
        },
        {
          "name": "caRetainedProfiles"
        },
        {
          "name": "selectVIPInfo"
        },
        {
          "name": "filterNotVIP"
        },
        {
          "name": "CountNotVipProfiles"
        },
        {
          "name": "filterVip"
        },
        {
          "name": "filterPlatinumVIP"
        },
        {
          "name": "VipDollarsSpentValue"
        },
        {
          "name": "VipGT500"
        },
        {
          "name": "VipLT300"
        },
        {
          "name": "Vip300to499"
        },
        {
          "name": "CountVipProfiles"
        },
        {
          "name": "CountPlatinumVipProfiles"
        },
        {
          "name": "CountDollarSpentGreaterThan500"
        },
        {
          "name": "CountDollarSpentLessThan300"
        },
        {
          "name": "CountDollarSpentBetween300to499"
        },
        {
          "name": "deriveCountColumns"
        },
        {
          "name": "selectCountColumnsOnly"
        },
        {
          "name": "CountNaProfiles"
        },
        {
          "name": "countCaProfiles"
        },
        {
          "name": "naRetainedProfile"
        },
        {
          "name": "CountNaRetainedProfiles"
        },
        {
          "name": "commonRetainedProfiles"
        },
        {
          "name": "CountCommonProfiles"
        },
        {
          "name": "NaRetainedUnionCaRetainedProfiles"
        },
        {
          "name": "CountCaRetainedProfiles"
        },
        {
          "name": "getUniqueProfiles"
        },
        {
          "name": "CountGlobalProfiles"
        },
        {
          "name": "selectNaEmails"
        },
        {
          "name": "selectCaProfiles"
        }
      ],
      "scriptLines": [
        "parameters{",
        "     eliCA as string (\"Eliminated CA Profile\")",
        "}",
        "source(output(",
        "          eliminationReason as string,",
        "          customerId as string,",
        "          profileStatus as string,",
        "          email as string",
        "     ),",
        "     allowSchemaDrift: true,",
        "     validateSchema: false,",
        "     format: 'document') ~> Profiles",
        "source(output(",
        "          updateTs as integer,",
        "          firstName as string,",
        "          lastName as string,",
        "          email as string,",
        "          profileStatus as string,",
        "          token as string,",
        "          emailHistory as string,",
        "          customerId as string,",
        "          preferredStores as string,",
        "          mobileNumber as integer,",
        "          homeNumber as string,",
        "          isRegistered as boolean,",
        "          zipCode as string,",
        "          schDefaultBillingAddressLine1 as string,",
        "          schDefaultShippingAddressLine1 as string,",
        "          region as string,",
        "          webhookMessageStatus as string,",
        "          janrainUuid as string,",
        "          oldFlCid as string,",
        "          oldKflCid as string,",
        "          oldLflCid as string,",
        "          oldFsCid as string,",
        "          oldFaCid as string,",
        "          oldCsCid as string,",
        "          oldFlcaCid as string,",
        "          oldEbCid as string,",
        "          fraudFlag as string[],",
        "          bannerOfOrigin as string,",
        "          emailVerified as integer,",
        "          militaryStatus as string,",
        "          militaryRequestId as string,",
        "          militaryExpiryDate as string,",
        "          storeNumber as string,",
        "          previousEmail as string,",
        "          password as string,",
        "          flxInfo as string,",
        "          optIns as (banner as string)[],",
        "          created as integer,",
        "          birthday as string,",
        "          inStoreSignUp as boolean,",
        "          createdBy as string,",
        "          xstoreId as string,",
        "          retailStoreId as string,",
        "          relateFailure as string,",
        "          changedFields as string,",
        "          csaInfo as string,",
        "          customerFlag as string,",
        "          event as string,",
        "          changedBy as string,",
        "          vipInfo as (vipNumber as string, status as string, isVip as boolean, lifeTimePoints as integer, lastLevelMoveDate as integer, lastLevelUpdateDateHyb as integer, loyaltyExpireDate as integer, dollarsSpent as (currencyIso as string, formattedValue as string, value as integer), dollarsNeedToSpend as string, loyaltyMinThreshold as string, loyaltyTargetThreshold as (currencyIso as string, formattedValue as string, value as integer)),",
        "          preferredLanguage as string,",
        "          lastLogin as string,",
        "          lastFailedLogin as string,",
        "          passwordChangeDate as string,",
        "          failedLoginAttempts as integer,",
        "          streetAddress as string,",
        "          country as string,",
        "          gender as string,",
        "          customerSyncStatus as string,",
        "          updateTsExceptLogin as integer,",
        "          relateCustomerId as string",
        "     ),",
        "     allowSchemaDrift: true,",
        "     validateSchema: false,",
        "     format: 'document') ~> caProfiles",
        "source(output(",
        "          bannerOfOrigin as string,",
        "          birthday as date,",
        "          changedBy as string,",
        "          changedFields as string,",
        "          country as string,",
        "          created as long,",
        "          createdBy as string,",
        "          csaInfo as (csaAgentEmail as string, zendeskTicketNumber as string),",
        "          customerFlag as string,",
        "          customerId as string,",
        "          customerSyncStatus as (process as string, status as string),",
        "          email as string,",
        "          emailHistory as (emailAddress as string, modificationTS as string)[],",
        "          emailVerified as long,",
        "          enrollmentSource as string,",
        "          event as string,",
        "          failedLoginAttempts as integer,",
        "          firstName as string,",
        "          flxInfo as (ctNumber as integer, flxEmailOptIn as boolean, flxNumber as long, flxTcVersion as string, loyaltyFlxEmailOptInBanner as string, loyaltyStatus as boolean, points as integer, referralCode as string, tier as string),",
        "          fraudFlag as string[],",
        "          gender as string,",
        "          homeNumber as long,",
        "          inStoreSignUp as boolean,",
        "          isRegistered as boolean,",
        "          janrainUuid as string,",
        "          lastFailedLogin as string,",
        "          lastLogin as string,",
        "          lastName as string,",
        "          militaryExpiryDate as string,",
        "          militaryRequestId as string,",
        "          militaryStatus as string,",
        "          mobileNumber as long,",
        "          oldCsCid as string,",
        "          oldEbCid as string,",
        "          oldFaCid as string,",
        "          oldFlCid as string,",
        "          oldFlcaCid as string,",
        "          oldFsCid as string,",
        "          oldKflCid as string,",
        "          oldLflCid as string,",
        "          optIns as (banner as string)[],",
        "          password as string,",
        "          passwordChangeDate as string,",
        "          preferredLanguage as string,",
        "          preferredStores as (CS as (city as string, zipcode as integer, name as string, latitude as double, state as string, storeId as integer, country as string, isocodeShort as string, longitude as double, division as short, line1 as string, status as string, line2 as string, phone as string), FA as (city as string, zipcode as integer, name as string, latitude as double, state as string, storeId as integer, country as string, isocodeShort as string, longitude as double, division as short, line1 as string, status as string, line2 as string, phone as string), FL as (city as string, zipcode as integer, name as string, latitude as double, state as string, storeId as integer, country as string, isocodeShort as string, longitude as double, division as short, line1 as string, status as string, line2 as string, phone as string)),",
        "          previousEmail as string,",
        "          profileStatus as string,",
        "          region as string,",
        "          relateCustomerId as integer,",
        "          relateFailure as boolean,",
        "          retailStoreId as integer,",
        "          schDefaultBillingAddressLine1 as string,",
        "          schDefaultShippingAddressLine1 as string,",
        "          storeNumber as string,",
        "          streetAddress as string,",
        "          token as string,",
        "          updateTs as long,",
        "          updateTsExceptLogin as long,",
        "          vipInfo as (dollarsNeedToSpend as (currencyIso as string, formattedValue as string, value as double), dollarsSpent as (currencyIso as string, formattedValue as string, value as double), isVip as boolean, lastLevelMoveDate as long, lastLevelUpdateDateHyb as long, lifeTimePoints as integer, loyaltyExpireDate as long, loyaltyMinThreshold as (currencyIso as string, formattedValue as string, value as double), loyaltyTargetThreshold as (currencyIso as string, formattedValue as string, value as double), status as string, vipNumber as string),",
        "          webhookMessageStatus as string,",
        "          xstoreId as string,",
        "          zipCode as string",
        "     ),",
        "     allowSchemaDrift: true,",
        "     validateSchema: false,",
        "     limit: 1,",
        "     format: 'document') ~> RandomSourceToGenerateNewCosmosCollection",
        "source(output(",
        "          updateTs as integer,",
        "          firstName as string,",
        "          lastName as string,",
        "          email as string,",
        "          profileStatus as string,",
        "          token as string,",
        "          emailHistory as string[],",
        "          customerId as string,",
        "          preferredStores as (FL as (storeId as string, division as string, name as string, phone as string, line1 as string, line2 as string, city as string, state as string, country as string, zipcode as string, isocodeShort as string, latitude as double, longitude as double, status as string), FA as (storeId as string, division as string, name as string, phone as string, line1 as string, line2 as string, city as string, state as string, country as string, zipcode as string, isocodeShort as string, latitude as double, longitude as double, status as string), CS as (storeId as string, division as string, name as string, phone as string, line1 as string, line2 as string, city as string, state as string, country as string, zipcode as string, isocodeShort as string, latitude as double, longitude as double, status as string), KFL as (storeId as string, division as string, name as string, phone as string, line1 as string, line2 as string, city as string, state as string, country as string, zipcode as string, isocodeShort as string)),",
        "          mobileNumber as string,",
        "          homeNumber as string,",
        "          isRegistered as boolean,",
        "          zipCode as string,",
        "          schDefaultBillingAddressLine1 as string,",
        "          schDefaultShippingAddressLine1 as string,",
        "          region as string,",
        "          webhookMessageStatus as string,",
        "          janrainUuid as string,",
        "          oldFlCid as string,",
        "          oldKflCid as string,",
        "          oldLflCid as string,",
        "          oldFsCid as string,",
        "          oldFaCid as string,",
        "          oldCsCid as string,",
        "          oldFlcaCid as string,",
        "          oldEbCid as string,",
        "          fraudFlag as string,",
        "          bannerOfOrigin as string,",
        "          emailVerified as integer,",
        "          militaryStatus as string,",
        "          militaryRequestId as string,",
        "          militaryExpiryDate as string,",
        "          storeNumber as string,",
        "          previousEmail as string,",
        "          password as string,",
        "          flxInfo as (flxEmailOptIn as boolean, loyaltyFlxEmailOptInBanner as string, loyaltyStatus as boolean, points as integer, tier as string, flxNumber as integer, ctNumber as integer, flxTcVersion as string, referralCode as string),",
        "          optIns as string[],",
        "          created as integer,",
        "          birthday as string,",
        "          inStoreSignUp as boolean,",
        "          createdBy as string,",
        "          xstoreId as string,",
        "          retailStoreId as string,",
        "          relateFailure as boolean,",
        "          changedFields as string,",
        "          csaInfo as string,",
        "          customerFlag as string,",
        "          event as string,",
        "          changedBy as string,",
        "          vipInfo as string,",
        "          preferredLanguage as string,",
        "          lastLogin as string,",
        "          lastFailedLogin as string,",
        "          passwordChangeDate as string,",
        "          failedLoginAttempts as integer,",
        "          streetAddress as string,",
        "          country as string,",
        "          gender as string,",
        "          customerSyncStatus as string,",
        "          updateTsExceptLogin as integer,",
        "          relateCustomerId as string",
        "     ),",
        "     allowSchemaDrift: true,",
        "     validateSchema: false,",
        "     format: 'document') ~> ProfileNa",
        "source(output(",
        "          updateTs as integer,",
        "          firstName as string,",
        "          lastName as string,",
        "          email as string,",
        "          profileStatus as string,",
        "          token as string,",
        "          emailHistory as string,",
        "          customerId as string,",
        "          preferredStores as string,",
        "          mobileNumber as integer,",
        "          homeNumber as string,",
        "          isRegistered as boolean,",
        "          zipCode as string,",
        "          schDefaultBillingAddressLine1 as string,",
        "          schDefaultShippingAddressLine1 as string,",
        "          region as string,",
        "          webhookMessageStatus as string,",
        "          janrainUuid as string,",
        "          oldFlCid as string,",
        "          oldKflCid as string,",
        "          oldLflCid as string,",
        "          oldFsCid as string,",
        "          oldFaCid as string,",
        "          oldCsCid as string,",
        "          oldFlcaCid as string,",
        "          oldEbCid as string,",
        "          fraudFlag as string[],",
        "          bannerOfOrigin as string,",
        "          emailVerified as integer,",
        "          militaryStatus as string,",
        "          militaryRequestId as string,",
        "          militaryExpiryDate as string,",
        "          storeNumber as string,",
        "          previousEmail as string,",
        "          password as string,",
        "          flxInfo as string,",
        "          optIns as (banner as string)[],",
        "          created as integer,",
        "          birthday as string,",
        "          inStoreSignUp as boolean,",
        "          createdBy as string,",
        "          xstoreId as string,",
        "          retailStoreId as string,",
        "          relateFailure as string,",
        "          changedFields as string,",
        "          csaInfo as string,",
        "          customerFlag as string,",
        "          event as string,",
        "          changedBy as string,",
        "          vipInfo as (vipNumber as string, status as string, isVip as boolean, lifeTimePoints as integer, lastLevelMoveDate as integer, lastLevelUpdateDateHyb as integer, loyaltyExpireDate as integer, dollarsSpent as (currencyIso as string, formattedValue as string, value as integer), dollarsNeedToSpend as string, loyaltyMinThreshold as string, loyaltyTargetThreshold as (currencyIso as string, formattedValue as string, value as integer)),",
        "          preferredLanguage as string,",
        "          lastLogin as string,",
        "          lastFailedLogin as string,",
        "          passwordChangeDate as string,",
        "          failedLoginAttempts as integer,",
        "          streetAddress as string,",
        "          country as string,",
        "          gender as string,",
        "          customerSyncStatus as string,",
        "          updateTsExceptLogin as integer,",
        "          relateCustomerId as string",
        "     ),",
        "     allowSchemaDrift: true,",
        "     validateSchema: false,",
        "     format: 'document') ~> profileCA",
        "Profiles filter(equalsIgnoreCase(profileStatus, $eliCA)) ~> filterCaEliminatedProfiles",
        "filterCaEliminatedProfiles aggregate(result = count(email)) ~> CountCaElimiatedProfiles",
        "Profiles filter(not(equalsIgnoreCase(profileStatus, $eliCA))) ~> filterNaEliminatedProfiles",
        "filterNaEliminatedProfiles aggregate(result = count(email)) ~> CountNaElimiatedProfiles",
        "selectCaProfiles, filterCaEliminatedProfiles exists(selectCaProfiles@email == Profiles@email,",
        "     negate:true,",
        "     broadcast: 'auto')~> caRetainedProfiles",
        "caRetainedProfiles select(mapColumn(",
        "          email,",
        "          vipInfo",
        "     ),",
        "     skipDuplicateMapInputs: true,",
        "     skipDuplicateMapOutputs: true) ~> selectVIPInfo",
        "selectVIPInfo filter(isNull(vipInfo.status)) ~> filterNotVIP",
        "filterNotVIP aggregate(result = count(email)) ~> CountNotVipProfiles",
        "selectVIPInfo filter(equalsIgnoreCase(vipInfo.status, 'VIP')) ~> filterVip",
        "selectVIPInfo filter(equalsIgnoreCase(vipInfo.status, 'Platinum VIP')) ~> filterPlatinumVIP",
        "selectVIPInfo derive(VipDollarSpent = toInteger(replace(vipInfo.dollarsSpent.formattedValue, '$', ''))) ~> VipDollarsSpentValue",
        "VipDollarsSpentValue filter(VipDollarSpent >=500) ~> VipGT500",
        "VipDollarsSpentValue filter(VipDollarSpent < 300) ~> VipLT300",
        "VipDollarsSpentValue filter(and(VipDollarSpent >=300,VipDollarSpent <=499)) ~> Vip300to499",
        "filterVip aggregate(result = count(email)) ~> CountVipProfiles",
        "filterPlatinumVIP aggregate(result = count(email)) ~> CountPlatinumVipProfiles",
        "VipGT500 aggregate(result = count(email)) ~> CountDollarSpentGreaterThan500",
        "VipLT300 aggregate(result = count(email)) ~> CountDollarSpentLessThan300",
        "Vip300to499 aggregate(result = count(email)) ~> CountDollarSpentBetween300to499",
        "RandomSourceToGenerateNewCosmosCollection derive(Na_Eliminated_Profiles = CacheCountNaEliProfiles#outputs()[1].result,",
        "          Ca_Eliminated_Profiles = CacheCountCaEliProfiles#outputs()[1].result,",
        "          Not_VIP_accounts = sinkNotVIP#outputs()[1].result,",
        "          VIP_accounts = sinkVip#outputs()[1].result,",
        "          Platinum_VIP_accounts = sinkPlatinumVip#outputs()[1].result,",
        "          Dollar_Spent_Less_than_300 = sinkVipLT300#outputs()[1].result,",
        "          Dollar_Spent_More_than_500 = sinkVipGT500#outputs()[1].result,",
        "          Dollar_Spent_between_300_to_499 = sinkVip300to499#outputs()[1].result,",
        "          Na_Profiles = CacheSinkNaProfiles#outputs()[1].result,",
        "          Ca_Profiles = CacheSinkCaProfiles#outputs()[1].result,",
        "          Na_Retained_Profiles = CacheSinkNaRetainedProfiles#outputs()[1].result,",
        "          Ca_Retained_Profiles = CacheSinkCaRetainedProfiles#outputs()[1].result,",
        "          Common_Profiles = CacheSinkCommonProfiles#outputs()[1].result,",
        "          Global_Profiles = CacheSinkGlobalProfiles#outputs()[1].result) ~> deriveCountColumns",
        "deriveCountColumns select(mapColumn(",
        "          Na_Eliminated_Profiles,",
        "          Ca_Eliminated_Profiles,",
        "          Not_VIP_accounts,",
        "          VIP_accounts,",
        "          Platinum_VIP_accounts,",
        "          Dollar_Spent_Less_than_300,",
        "          Dollar_Spent_More_than_500,",
        "          Dollar_Spent_between_300_to_499,",
        "          Na_Profiles,",
        "          Ca_Profiles,",
        "          Na_Retained_Profiles,",
        "          Ca_Retained_Profiles,",
        "          Common_Profiles,",
        "          Global_Profiles",
        "     ),",
        "     skipDuplicateMapInputs: true,",
        "     skipDuplicateMapOutputs: true) ~> selectCountColumnsOnly",
        "ProfileNa aggregate(result = count(email)) ~> CountNaProfiles",
        "profileCA aggregate(result = count(email)) ~> countCaProfiles",
        "selectNaEmails, filterNaEliminatedProfiles exists(selectNaEmails@email == Profiles@email,",
        "     negate:true,",
        "     broadcast: 'auto')~> naRetainedProfile",
        "naRetainedProfile aggregate(result = count(email)) ~> CountNaRetainedProfiles",
        "naRetainedProfile, caRetainedProfiles exists(selectNaEmails@email == selectCaProfiles@email,",
        "     negate:false,",
        "     broadcast: 'auto')~> commonRetainedProfiles",
        "commonRetainedProfiles aggregate(result = count(email)) ~> CountCommonProfiles",
        "naRetainedProfile, caRetainedProfiles union(byName: true)~> NaRetainedUnionCaRetainedProfiles",
        "caRetainedProfiles aggregate(result = count(email)) ~> CountCaRetainedProfiles",
        "NaRetainedUnionCaRetainedProfiles aggregate(groupBy(email),",
        "     each(match(name!='email'), $$ = first($$))) ~> getUniqueProfiles",
        "getUniqueProfiles aggregate(result = count(email)) ~> CountGlobalProfiles",
        "ProfileNa select(mapColumn(",
        "          email",
        "     ),",
        "     skipDuplicateMapInputs: true,",
        "     skipDuplicateMapOutputs: true) ~> selectNaEmails",
        "caProfiles select(mapColumn(",
        "          email,",
        "          customerId,",
        "          bannerOfOrigin,",
        "          emailVerified,",
        "          created,",
        "          vipInfo,",
        "          lastLogin",
        "     ),",
        "     skipDuplicateMapInputs: true,",
        "     skipDuplicateMapOutputs: true) ~> selectCaProfiles",
        "CountCaElimiatedProfiles sink(validateSchema: false,",
        "     skipDuplicateMapInputs: true,",
        "     skipDuplicateMapOutputs: true,",
        "     store: 'cache',",
        "     format: 'inline',",
        "     output: false,",
        "     saveOrder: 1) ~> CacheCountCaEliProfiles",
        "CountNaElimiatedProfiles sink(validateSchema: false,",
        "     skipDuplicateMapInputs: true,",
        "     skipDuplicateMapOutputs: true,",
        "     store: 'cache',",
        "     format: 'inline',",
        "     output: false,",
        "     saveOrder: 1) ~> CacheCountNaEliProfiles",
        "CountNotVipProfiles sink(validateSchema: false,",
        "     skipDuplicateMapInputs: true,",
        "     skipDuplicateMapOutputs: true,",
        "     store: 'cache',",
        "     format: 'inline',",
        "     output: false,",
        "     saveOrder: 3) ~> sinkNotVIP",
        "CountVipProfiles sink(validateSchema: false,",
        "     skipDuplicateMapInputs: true,",
        "     skipDuplicateMapOutputs: true,",
        "     store: 'cache',",
        "     format: 'inline',",
        "     output: false,",
        "     saveOrder: 3) ~> sinkVip",
        "CountPlatinumVipProfiles sink(validateSchema: false,",
        "     skipDuplicateMapInputs: true,",
        "     skipDuplicateMapOutputs: true,",
        "     store: 'cache',",
        "     format: 'inline',",
        "     output: false,",
        "     saveOrder: 3) ~> sinkPlatinumVip",
        "CountDollarSpentGreaterThan500 sink(validateSchema: false,",
        "     skipDuplicateMapInputs: true,",
        "     skipDuplicateMapOutputs: true,",
        "     store: 'cache',",
        "     format: 'inline',",
        "     output: false,",
        "     saveOrder: 3) ~> sinkVipGT500",
        "CountDollarSpentLessThan300 sink(validateSchema: false,",
        "     skipDuplicateMapInputs: true,",
        "     skipDuplicateMapOutputs: true,",
        "     store: 'cache',",
        "     format: 'inline',",
        "     output: false,",
        "     saveOrder: 3) ~> sinkVipLT300",
        "CountDollarSpentBetween300to499 sink(validateSchema: false,",
        "     skipDuplicateMapInputs: true,",
        "     skipDuplicateMapOutputs: true,",
        "     store: 'cache',",
        "     format: 'inline',",
        "     output: false,",
        "     saveOrder: 3) ~> sinkVip300to499",
        "selectCountColumnsOnly sink(allowSchemaDrift: true,",
        "     validateSchema: false,",
        "     deletable:false,",
        "     insertable:true,",
        "     updateable:false,",
        "     upsertable:false,",
        "     recreate:true,",
        "     format: 'document',",
        "     batchSize: 5000,",
        "     partitionKey: ['/id'],",
        "     throughput: 10000,",
        "     skipDuplicateMapInputs: true,",
        "     skipDuplicateMapOutputs: true,",
        "     quoteAll: true,",
        "     saveOrder: 4,",
        "     partitionBy('hash', 1),",
        "     preCommands: [],",
        "     postCommands: []) ~> sinkProfilesCount",
        "CountNaProfiles sink(validateSchema: false,",
        "     skipDuplicateMapInputs: true,",
        "     skipDuplicateMapOutputs: true,",
        "     store: 'cache',",
        "     format: 'inline',",
        "     output: false,",
        "     saveOrder: 1) ~> CacheSinkNaProfiles",
        "countCaProfiles sink(validateSchema: false,",
        "     skipDuplicateMapInputs: true,",
        "     skipDuplicateMapOutputs: true,",
        "     store: 'cache',",
        "     format: 'inline',",
        "     output: false,",
        "     saveOrder: 1) ~> CacheSinkCaProfiles",
        "CountNaRetainedProfiles sink(validateSchema: false,",
        "     skipDuplicateMapInputs: true,",
        "     skipDuplicateMapOutputs: true,",
        "     store: 'cache',",
        "     format: 'inline',",
        "     output: false,",
        "     saveOrder: 2) ~> CacheSinkNaRetainedProfiles",
        "CountCommonProfiles sink(validateSchema: false,",
        "     skipDuplicateMapInputs: true,",
        "     skipDuplicateMapOutputs: true,",
        "     store: 'cache',",
        "     format: 'inline',",
        "     output: false,",
        "     saveOrder: 3) ~> CacheSinkCommonProfiles",
        "CountCaRetainedProfiles sink(validateSchema: false,",
        "     skipDuplicateMapInputs: true,",
        "     skipDuplicateMapOutputs: true,",
        "     store: 'cache',",
        "     format: 'inline',",
        "     output: false,",
        "     saveOrder: 2) ~> CacheSinkCaRetainedProfiles",
        "CountGlobalProfiles sink(validateSchema: false,",
        "     skipDuplicateMapInputs: true,",
        "     skipDuplicateMapOutputs: true,",
        "     store: 'cache',",
        "     format: 'inline',",
        "     output: false,",
        "     saveOrder: 3) ~> CacheSinkGlobalProfiles"
      ]
    }
  }
}