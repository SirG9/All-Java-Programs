{
  "name": "df_address_migration_uat",
  "properties": {
    "folder": {
      "name": "ccore/TDATA-4433/uat"
    },
    "type": "MappingDataFlow",
    "typeProperties": {
      "sources": [
        {
          "dataset": {
            "referenceName": "ds_cntnr_na_address_uat",
            "type": "DatasetReference"
          },
          "name": "NaAddress"
        },
        {
          "dataset": {
            "referenceName": "ds_cntnr_na_profiles_uat",
            "type": "DatasetReference"
          },
          "name": "GlobalProfile"
        },
        {
          "dataset": {
            "referenceName": "ds_cntnr_ca_address_uat",
            "type": "DatasetReference"
          },
          "name": "CaAddress"
        }
      ],
      "sinks": [
        {
          "dataset": {
            "referenceName": "ds_cntnr_na_addresses_uat",
            "type": "DatasetReference"
          },
          "name": "GlobalAddress"
        }
      ],
      "transformations": [
        {
          "name": "FilteredNaAddresses"
        },
        {
          "name": "FilteredCaAddresses"
        },
        {
          "name": "UnionExistAndDExist"
        },
        {
          "name": "DerShippingBilling"
        },
        {
          "name": "CaInnerJoinNa"
        },
        {
          "name": "repCustCaID"
        },
        {
          "name": "selectOnlyCaFields"
        }
      ],
      "scriptLines": [
        "source(output(",
        "          zipCode as string,",
        "          country as string,",
        "          city as string,",
        "          addressType as string,",
        "          fullName as string,",
        "          defaultBilling as boolean,",
        "          stateName as string,",
        "          customerId as string,",
        "          linkAddressId as integer,",
        "          addressLine1 as string,",
        "          addressLine2 as string,",
        "          addressLine3 as string,",
        "          state as string,",
        "          countryName as string,",
        "          updateTs as integer,",
        "          email as string,",
        "          defaultShipping as boolean,",
        "          firstName as string,",
        "          lastName as string,",
        "          phone as string,",
        "          isFPO as boolean,",
        "          regionFPO as string",
        "     ),",
        "     allowSchemaDrift: true,",
        "     validateSchema: false,",
        "     format: 'document',",
        "     systemColumns: true) ~> NaAddress",
        "source(output(",
        "          birthday as string,",
        "          lastName as string,",
        "          lastLogin as string,",
        "          flxInfo as (flxTcVersion as string, tier as string, flxNumber as integer, referralCode as string, loyaltyFlxEmailOptInBanner as string, flxEmailOptIn as boolean, loyaltyStatus as boolean, ctNumber as integer, points as integer),",
        "          profileStatus as string,",
        "          changedFields as string,",
        "          customerFlag as string,",
        "          lastFailedLogin as string,",
        "          janrainUuid as string,",
        "          changedBy as string,",
        "          customerId as string,",
        "          event as string,",
        "          email as string,",
        "          created as integer,",
        "          schDefaultShippingAddressLine1 as string,",
        "          failedLoginAttempts as integer,",
        "          token as string,",
        "          firstName as string,",
        "          bannerOfOrigin as string,",
        "          emailVerified as string,",
        "          vipInfo as (dollarsNeedToSpend as (currencyIso as string, formattedValue as string, value as integer), loyaltyMinThreshold as (currencyIso as string, formattedValue as string, value as integer), dollarsSpent as (currencyIso as string, formattedValue as string, value as integer), loyaltyTargetThreshold as (currencyIso as string, formattedValue as string, value as integer), isVip as boolean, vipNumber as string, lastLevelUpdateDateHyb as integer, lastLevelMoveDate as integer, status as string, loyaltyExpireDate as integer, lifeTimePoints as integer),",
        "          inStoreSignUp as boolean,",
        "          createdBy as string,",
        "          isRegistered as boolean,",
        "          updateTs as integer,",
        "          updateTsExceptLogin as integer,",
        "          preferredLanguage as string,",
        "          optIns as (banner as string)[],",
        "          zipCode as string,",
        "          country as string,",
        "          storeNumber as string,",
        "          mobileNumber as integer,",
        "          oldCsCid as string,",
        "          emailHistory as (emailAddress as string, modificationTS as string)[],",
        "          webhookMessageStatus as string,",
        "          oldEbCid as string,",
        "          passwordChangeDate as string,",
        "          militaryExpiryDate as string,",
        "          oldLflCid as string,",
        "          schDefaultBillingAddressLine1 as string,",
        "          militaryStatus as string,",
        "          oldFsCid as string,",
        "          oldFlCid as string,",
        "          militaryRequestId as string,",
        "          previousEmail as string,",
        "          xstoreId as string,",
        "          oldFlcaCid as string,",
        "          fraudFlag as string[],",
        "          oldKflCid as string,",
        "          oldFaCid as string,",
        "          homeNumber as integer,",
        "          relateFailure as string",
        "     ),",
        "     allowSchemaDrift: true,",
        "     validateSchema: false,",
        "     format: 'document') ~> GlobalProfile",
        "source(output(",
        "          updateTs as long,",
        "          fullName as string,",
        "          addressLine1 as string,",
        "          addressLine2 as string,",
        "          addressLine3 as string,",
        "          zipCode as string,",
        "          city as string,",
        "          state as string,",
        "          country as string,",
        "          defaultShipping as boolean,",
        "          defaultBilling as boolean,",
        "          customerId as string,",
        "          linkAddressId as integer,",
        "          isFPO as boolean,",
        "          email as string,",
        "          addressType as string,",
        "          firstName as string,",
        "          lastName as string,",
        "          stateName as string,",
        "          countryName as string,",
        "          phone as string,",
        "          regionFPO as string",
        "     ),",
        "     allowSchemaDrift: true,",
        "     validateSchema: false,",
        "     format: 'document',",
        "     systemColumns: true) ~> CaAddress",
        "NaAddress, GlobalProfile exists(NaAddress@email ==GlobalProfile@email,",
        "     negate:false,",
        "     broadcast: 'auto')~> FilteredNaAddresses",
        "CaAddress, GlobalProfile exists(CaAddress@email == GlobalProfile@email,",
        "     negate:false,",
        "     broadcast: 'auto')~> FilteredCaAddresses",
        "FilteredNaAddresses, selectOnlyCaFields union(byName: true)~> UnionExistAndDExist",
        "FilteredCaAddresses derive(defaultShipping = toBoolean('false'),",
        "          defaultBilling = toBoolean('false')) ~> DerShippingBilling",
        "DerShippingBilling, GlobalProfile join(equals(CaAddress@email, GlobalProfile@email),",
        "     joinType:'cross',",
        "     matchType:'exact',",
        "     ignoreSpaces: false,",
        "     broadcast: 'auto')~> CaInnerJoinNa",
        "CaInnerJoinNa derive(customerId = GlobalProfile@customerId) ~> repCustCaID",
        "repCustCaID select(mapColumn(",
        "          updateTs = CaAddress@updateTs,",
        "          fullName,",
        "          addressLine1,",
        "          addressLine3,",
        "          zipCode = CaAddress@zipCode,",
        "          city,",
        "          state,",
        "          country = CaAddress@country,",
        "          defaultShipping,",
        "          defaultBilling,",
        "          customerId,",
        "          linkAddressId,",
        "          isFPO,",
        "          email = CaAddress@email,",
        "          addressType",
        "     ),",
        "     skipDuplicateMapInputs: true,",
        "     skipDuplicateMapOutputs: true) ~> selectOnlyCaFields",
        "UnionExistAndDExist sink(allowSchemaDrift: true,",
        "     validateSchema: false,",
        "     input(",
        "          zipCode as string,",
        "          country as string,",
        "          city as string,",
        "          addressType as string,",
        "          fullName as string,",
        "          defaultBilling as boolean,",
        "          stateName as string,",
        "          customerId as string,",
        "          linkAddressId as integer,",
        "          addressLine1 as string,",
        "          addressLine2 as string,",
        "          state as string,",
        "          countryName as string,",
        "          updateTs as integer,",
        "          email as string,",
        "          defaultShipping as boolean",
        "     ),",
        "     deletable:false,",
        "     insertable:true,",
        "     updateable:false,",
        "     upsertable:false,",
        "     recreate:true,",
        "     format: 'document',",
        "     partitionKey: ['/id'],",
        "     throughput: 400,",
        "     skipDuplicateMapInputs: true,",
        "     skipDuplicateMapOutputs: true) ~> GlobalAddress"
      ]
    }
  }
}