{
  "name": "df_profiles_migration_uat",
  "properties": {
    "folder": {
      "name": "ccore/TDATA-4433/uat"
    },
    "type": "MappingDataFlow",
    "typeProperties": {
      "sources": [
        {
          "dataset": {
            "referenceName": "ds_cntnr_na_profile_uat",
            "type": "DatasetReference"
          },
          "name": "NaProfile"
        },
        {
          "dataset": {
            "referenceName": "ds_cntnr_ca_profile_uat",
            "type": "DatasetReference"
          },
          "name": "CaProfile"
        },
        {
          "dataset": {
            "referenceName": "ds_cntnr_na_profiles_eliminated_uat",
            "type": "DatasetReference"
          },
          "name": "naEliminatedProfiles"
        },
        {
          "dataset": {
            "referenceName": "ds_cntnr_ca_profiles_eliminated_uat",
            "type": "DatasetReference"
          },
          "name": "caEliminatedProfiles"
        }
      ],
      "sinks": [
        {
          "dataset": {
            "referenceName": "ds_cntnr_na_profiles_uat",
            "type": "DatasetReference"
          },
          "name": "SinkGlobalProfile"
        },
        {
          "dataset": {
            "referenceName": "ds_cntnr_na_profiles_retained_uat",
            "type": "DatasetReference"
          },
          "name": "SinkNaProfileRetained"
        },
        {
          "dataset": {
            "referenceName": "ds_cntnr_ca_profiles_retained_uat",
            "type": "DatasetReference"
          },
          "name": "SinkCaProfileRetained"
        },
        {
          "dataset": {
            "referenceName": "ds_cntnr_na_profiles_uat",
            "type": "DatasetReference"
          },
          "name": "sinkCommonProfiles"
        },
        {
          "dataset": {
            "referenceName": "ds_cntnr_na_profiles_common_uat",
            "type": "DatasetReference"
          },
          "name": "sinkAtCommonProfilesContainer"
        }
      ],
      "transformations": [
        {
          "name": "NaUnionCaRetainedProfiles"
        },
        {
          "name": "SelectPrefLangAndVipinfoFromCa"
        },
        {
          "name": "SelectCaRetainedProfiles"
        },
        {
          "name": "NaRetainedProfiles"
        },
        {
          "name": "CaRetainedProfiles"
        },
        {
          "name": "CaRetainedProfilesDoesNotExistsInNaRetainedProfiles"
        },
        {
          "name": "derivedNaRegionAndCountry"
        },
        {
          "name": "derivedCaRegionAndCountry"
        },
        {
          "name": "NaJoinCaRetainedProfiles"
        },
        {
          "name": "derivePrefLangAndVipInfoNew"
        },
        {
          "name": "removeCaCols"
        },
        {
          "name": "NaRetainedProfilesDoesNotExistInCaRetainedProfiles"
        },
        {
          "name": "selectColsForCommonProfileContainer"
        },
        {
          "name": "removeCaPreferredStores"
        }
      ],
      "scriptLines": [
        "source(output(",
        "          bannerOfOrigin as string,",
        "          birthday as string,",
        "          changedBy as string,",
        "          changedFields as string,",
        "          country as string,",
        "          created as long,",
        "          createdBy as string,",
        "          csaInfo as (csaAgentEmail as string, zendeskTicketNumber as string),",
        "          customerFlag as string,",
        "          customerId as string,",
        "          customerSyncStatus as (status as string, updateTs as long, process as string),",
        "          email as string,",
        "          emailHistory as (emailAddress as string, modificationTS as string)[],",
        "          emailVerified as long,",
        "          enrollmentSource as string,",
        "          event as string,",
        "          failedLoginAttempts as long,",
        "          firstName as string,",
        "          flxInfo as (flxEmailOptIn as boolean, loyaltyFlxEmailOptInBanner as string, loyaltyStatus as boolean, points as integer, tier as string, flxNumber as long, ctNumber as integer, flxTcVersion as string, referralCode as string),",
        "          fraudFlag as string[],",
        "          gender as string,",
        "          homeNumber as long,",
        "          id as string,",
        "          inStoreSignUp as boolean,",
        "          isRegistered as boolean,",
        "          janrainUuid as string,",
        "          lastFailedLogin as string,",
        "          lastLogin as string,",
        "          lastName as string,",
        "          militaryExpiryDate as string,",
        "          militaryRequestId as string,",
        "          militaryStatus as string,",
        "          mobileNumber as long,",
        "          oldCsCid as string,",
        "          oldEbCid as string,",
        "          oldFaCid as string,",
        "          oldFlCid as string,",
        "          oldFlcaCid as string,",
        "          oldFsCid as string,",
        "          oldKflCid as string,",
        "          oldLflCid as string,",
        "          optIns as (banner as string)[],",
        "          password as string,",
        "          passwordChangeDate as string,",
        "          preferredLanguage as string,",
        "          preferredStores as (CS as (city as string, country as string, division as string, isocodeShort as string, latitude as double, line1 as string, line2 as string, longitude as double, name as string, phone as string, state as string, status as string, storeId as string, zipcode as string), FA as (city as string, country as string, division as string, isocodeShort as string, latitude as double, line1 as string, line2 as string, longitude as double, name as string, phone as string, state as string, status as string, storeId as string, zipcode as string), FL as (city as string, country as string, division as string, isocodeShort as string, latitude as double, line1 as string, line2 as string, longitude as double, name as string, phone as string, state as string, status as string, storeId as string, zipcode as string), KFL as (city as string, country as string, division as string, isocodeShort as string, latitude as double, line1 as string, line2 as string, longitude as double, name as string, phone as string, state as string, status as string, storeId as string, zipcode as string), LFL as (city as string, country as string, division as string, isocodeShort as string, latitude as double, line1 as string, line2 as string, longitude as double, name as string, phone as string, state as string, status as string, storeId as string, zipcode as string)),",
        "          previousEmail as string,",
        "          profileStatus as string,",
        "          region as string,",
        "          relateCustomerId as string,",
        "          relateFailure as boolean,",
        "          retailStoreId as integer,",
        "          schDefaultBillingAddressLine1 as string,",
        "          schDefaultShippingAddressLine1 as string,",
        "          storeNumber as string,",
        "          streetAddress as string,",
        "          token as string,",
        "          updateTs as long,",
        "          updateTsExceptLogin as long,",
        "          vipInfo as (dollarsNeedToSpend as (currencyIso as string, formattedValue as string, value as double), loyaltyMinThreshold as (currencyIso as string, formattedValue as string, value as double), dollarsSpent as (currencyIso as string, formattedValue as string, value as double), loyaltyTargetThreshold as (currencyIso as string, formattedValue as string, value as double), vipNumber as string, lastLevelUpdateDateHyb as long, lastLevelMoveDate as long, loyaltyExpireDate as long, isVip as boolean, lifeTimePoints as long, status as string),",
        "          webhookMessageStatus as string,",
        "          xstoreId as string,",
        "          zipCode as string",
        "     ),",
        "     allowSchemaDrift: true,",
        "     validateSchema: false,",
        "     query: 'select c.id,c.updateTs,c.firstName,c.lastName,c.email,c.profileStatus,c.token,c.emailHistory,c.customerId,c.preferredStores,c.mobileNumber,c.homeNumber,c.isRegistered,c.zipCode,c.schDefaultBillingAddressLine1,c.schDefaultShippingAddressLine1,c.region,c.webhookMessageStatus,c.janrainUuid,c.oldFlCid,c.oldKflCid,c.oldLflCid,c.oldFsCid,c.oldFaCid,c.oldCsCid,c.oldFlcaCid,c.oldEbCid,c.fraudFlag,c.bannerOfOrigin,c.emailVerified,c.militaryStatus,c.militaryRequestId,c.militaryExpiryDate,c.storeNumber,c.previousEmail,c.password,c.flxInfo,c.optIns,c.created,c.birthday,c.inStoreSignUp,c.createdBy,c.xstoreId,c.retailStoreId,c.relateFailure,c.changedFields,c.csaInfo,c.customerFlag,c.enrollmentSource,c.event,c.changedBy,c.vipInfo,c.preferredLanguage,c.lastLogin,c.lastFailedLogin,c.passwordChangeDate,c.failedLoginAttempts,c.streetAddress,c.country,c.gender,c.customerSyncStatus,c.updateTsExceptLogin,c.relateCustomerId from c',",
        "     format: 'documentQuery',",
        "     systemColumns: false) ~> NaProfile",
        "source(output(",
        "          bannerOfOrigin as string,",
        "          birthday as string,",
        "          changedBy as string,",
        "          changedFields as string,",
        "          country as string,",
        "          created as long,",
        "          createdBy as string,",
        "          csaInfo as (csaAgentEmail as string, zendeskTicketNumber as string),",
        "          customerFlag as string,",
        "          customerId as string,",
        "          customerSyncStatus as (status as string, updateTs as long, process as string),",
        "          email as string,",
        "          emailHistory as (emailAddress as string, modificationTS as string)[],",
        "          emailVerified as long,",
        "          enrollmentSource as string,",
        "          event as string,",
        "          failedLoginAttempts as long,",
        "          firstName as string,",
        "          flxInfo as (flxEmailOptIn as boolean, loyaltyFlxEmailOptInBanner as string, loyaltyStatus as boolean, points as integer, tier as string, flxNumber as long, ctNumber as integer, flxTcVersion as string, referralCode as string),",
        "          fraudFlag as string[],",
        "          gender as string,",
        "          homeNumber as long,",
        "          id as string,",
        "          inStoreSignUp as boolean,",
        "          isRegistered as boolean,",
        "          janrainUuid as string,",
        "          lastFailedLogin as string,",
        "          lastLogin as string,",
        "          lastName as string,",
        "          militaryExpiryDate as string,",
        "          militaryRequestId as string,",
        "          militaryStatus as string,",
        "          mobileNumber as long,",
        "          oldCsCid as string,",
        "          oldEbCid as string,",
        "          oldFaCid as string,",
        "          oldFlCid as string,",
        "          oldFlcaCid as string,",
        "          oldFsCid as string,",
        "          oldKflCid as string,",
        "          oldLflCid as string,",
        "          optIns as (banner as string)[],",
        "          password as string,",
        "          passwordChangeDate as string,",
        "          preferredLanguage as string,",
        "          preferredStores as (CS as (city as string, country as string, division as string, isocodeShort as string, latitude as double, line1 as string, line2 as string, longitude as double, name as string, phone as string, state as string, status as string, storeId as string, zipcode as string), FA as (city as string, country as string, division as string, isocodeShort as string, latitude as double, line1 as string, line2 as string, longitude as double, name as string, phone as string, state as string, status as string, storeId as string, zipcode as string), FL as (city as string, country as string, division as string, isocodeShort as string, latitude as double, line1 as string, line2 as string, longitude as double, name as string, phone as string, state as string, status as string, storeId as string, zipcode as string), KFL as (city as string, country as string, division as string, isocodeShort as string, latitude as double, line1 as string, line2 as string, longitude as double, name as string, phone as string, state as string, status as string, storeId as string, zipcode as string), LFL as (city as string, country as string, division as string, isocodeShort as string, latitude as double, line1 as string, line2 as string, longitude as double, name as string, phone as string, state as string, status as string, storeId as string, zipcode as string)),",
        "          previousEmail as string,",
        "          profileStatus as string,",
        "          region as string,",
        "          relateCustomerId as string,",
        "          relateFailure as boolean,",
        "          retailStoreId as integer,",
        "          schDefaultBillingAddressLine1 as string,",
        "          schDefaultShippingAddressLine1 as string,",
        "          storeNumber as string,",
        "          streetAddress as string,",
        "          token as string,",
        "          updateTs as long,",
        "          updateTsExceptLogin as long,",
        "          vipInfo as (dollarsNeedToSpend as (currencyIso as string, formattedValue as string, value as double), loyaltyMinThreshold as (currencyIso as string, formattedValue as string, value as double), dollarsSpent as (currencyIso as string, formattedValue as string, value as double), loyaltyTargetThreshold as (currencyIso as string, formattedValue as string, value as double), vipNumber as string, lastLevelUpdateDateHyb as long, lastLevelMoveDate as long, loyaltyExpireDate as long, isVip as boolean, lifeTimePoints as long, status as string),",
        "          webhookMessageStatus as string,",
        "          xstoreId as string,",
        "          zipCode as string",
        "     ),",
        "     allowSchemaDrift: true,",
        "     validateSchema: false,",
        "     query: 'select c.id,c.updateTs,c.firstName,c.lastName,c.email,c.profileStatus,c.token,c.emailHistory,c.customerId,c.preferredStores,c.mobileNumber,c.homeNumber,c.isRegistered,c.zipCode,c.schDefaultBillingAddressLine1,c.schDefaultShippingAddressLine1,c.region,c.webhookMessageStatus,c.janrainUuid,c.oldFlCid,c.oldKflCid,c.oldLflCid,c.oldFsCid,c.oldFaCid,c.oldCsCid,c.oldFlcaCid,c.oldEbCid,c.fraudFlag,c.bannerOfOrigin,c.emailVerified,c.militaryStatus,c.militaryRequestId,c.militaryExpiryDate,c.storeNumber,c.previousEmail,c.password,c.flxInfo,c.optIns,c.created,c.birthday,c.inStoreSignUp,c.createdBy,c.xstoreId,c.retailStoreId,c.relateFailure,c.changedFields,c.csaInfo,c.customerFlag,c.enrollmentSource,c.event,c.changedBy,c.vipInfo,c.preferredLanguage,c.lastLogin,c.lastFailedLogin,c.passwordChangeDate,c.failedLoginAttempts,c.streetAddress,c.country,c.gender,c.customerSyncStatus,c.updateTsExceptLogin,c.relateCustomerId from c',",
        "     format: 'documentQuery',",
        "     systemColumns: false) ~> CaProfile",
        "source(output(",
        "          email as string,",
        "          id as string",
        "     ),",
        "     allowSchemaDrift: true,",
        "     validateSchema: false,",
        "     query: 'select c.id, c.email from c',",
        "     format: 'documentQuery',",
        "     systemColumns: false) ~> naEliminatedProfiles",
        "source(output(",
        "          email as string,",
        "          id as string",
        "     ),",
        "     allowSchemaDrift: true,",
        "     validateSchema: false,",
        "     query: 'select c.id, c.email from c',",
        "     format: 'documentQuery',",
        "     systemColumns: false) ~> caEliminatedProfiles",
        "NaRetainedProfilesDoesNotExistInCaRetainedProfiles, removeCaPreferredStores union(byName: true)~> NaUnionCaRetainedProfiles",
        "SelectCaRetainedProfiles select(mapColumn(",
        "          email,",
        "          preferredLanguage,",
        "          vipInfo,",
        "          janrainUuid,",
        "          customerId",
        "     ),",
        "     skipDuplicateMapInputs: true,",
        "     skipDuplicateMapOutputs: true) ~> SelectPrefLangAndVipinfoFromCa",
        "CaRetainedProfiles select(mapColumn(",
        "          bannerOfOrigin,",
        "          birthday,",
        "          changedBy,",
        "          changedFields,",
        "          country,",
        "          createdBy,",
        "          csaInfo,",
        "          customerFlag,",
        "          customerId,",
        "          customerSyncStatus,",
        "          email,",
        "          emailHistory,",
        "          emailVerified,",
        "          event,",
        "          failedLoginAttempts,",
        "          firstName,",
        "          flxInfo,",
        "          fraudFlag,",
        "          gender,",
        "          homeNumber,",
        "          inStoreSignUp,",
        "          isRegistered,",
        "          janrainUuid,",
        "          lastFailedLogin,",
        "          lastLogin,",
        "          lastName,",
        "          militaryExpiryDate,",
        "          militaryRequestId,",
        "          militaryStatus,",
        "          mobileNumber,",
        "          oldCsCid,",
        "          oldEbCid,",
        "          oldFaCid,",
        "          oldFlCid,",
        "          oldFlcaCid,",
        "          oldFsCid,",
        "          oldKflCid,",
        "          oldLflCid,",
        "          optIns,",
        "          password,",
        "          passwordChangeDate,",
        "          preferredLanguage,",
        "          previousEmail,",
        "          profileStatus,",
        "          region,",
        "          relateCustomerId,",
        "          relateFailure,",
        "          retailStoreId,",
        "          schDefaultBillingAddressLine1,",
        "          schDefaultShippingAddressLine1,",
        "          storeNumber,",
        "          streetAddress,",
        "          token,",
        "          updateTs,",
        "          updateTsExceptLogin,",
        "          vipInfo,",
        "          webhookMessageStatus,",
        "          xstoreId,",
        "          zipCode,",
        "          id,",
        "          created",
        "     ),",
        "     skipDuplicateMapInputs: true,",
        "     skipDuplicateMapOutputs: true) ~> SelectCaRetainedProfiles",
        "derivedNaRegionAndCountry, naEliminatedProfiles exists(NaProfile@id== naEliminatedProfiles@id,",
        "     negate:true,",
        "     broadcast: 'auto')~> NaRetainedProfiles",
        "derivedCaRegionAndCountry, caEliminatedProfiles exists(CaProfile@id== caEliminatedProfiles@id,",
        "     negate:true,",
        "     broadcast: 'auto')~> CaRetainedProfiles",
        "CaRetainedProfiles, NaRetainedProfiles exists(CaProfile@email == NaProfile@email,",
        "     negate:true,",
        "     broadcast: 'auto')~> CaRetainedProfilesDoesNotExistsInNaRetainedProfiles",
        "NaProfile derive(region = iif(or(isNull(region),equalsIgnoreCase(region, '')), \"US\", region),",
        "          country = iif(or(isNull(country),equalsIgnoreCase(country, '')), \"US\", country)) ~> derivedNaRegionAndCountry",
        "CaProfile derive(region = iif(or(isNull(region),equalsIgnoreCase(region, '')), \"CA\", region),",
        "          country = iif(or(isNull(country),equalsIgnoreCase(country, '')), \"CA\", country)) ~> derivedCaRegionAndCountry",
        "NaRetainedProfiles, SelectPrefLangAndVipinfoFromCa join(NaProfile@email == SelectPrefLangAndVipinfoFromCa@email,",
        "     joinType:'inner',",
        "     matchType:'exact',",
        "     ignoreSpaces: false,",
        "     broadcast: 'auto')~> NaJoinCaRetainedProfiles",
        "NaJoinCaRetainedProfiles derive(preferredLanguage = iif(equalsIgnoreCase(SelectPrefLangAndVipinfoFromCa@preferredLanguage, 'fr'), 'fr', 'en'),",
        "          vipInfo = iif(isNull(SelectPrefLangAndVipinfoFromCa@vipInfo), NaProfile@vipInfo, SelectPrefLangAndVipinfoFromCa@vipInfo),",
        "          customerId = NaProfile@customerId) ~> derivePrefLangAndVipInfoNew",
        "derivePrefLangAndVipInfoNew select(mapColumn(",
        "          bannerOfOrigin,",
        "          birthday,",
        "          changedBy,",
        "          changedFields,",
        "          country,",
        "          created,",
        "          createdBy,",
        "          csaInfo,",
        "          customerFlag,",
        "          customerId,",
        "          customerSyncStatus,",
        "          email = NaProfile@email,",
        "          emailHistory,",
        "          emailVerified,",
        "          enrollmentSource,",
        "          event,",
        "          failedLoginAttempts,",
        "          firstName,",
        "          flxInfo,",
        "          fraudFlag,",
        "          gender,",
        "          homeNumber,",
        "          inStoreSignUp,",
        "          isRegistered,",
        "          janrainUuid = NaProfile@janrainUuid,",
        "          lastFailedLogin,",
        "          lastLogin,",
        "          lastName,",
        "          militaryExpiryDate,",
        "          militaryRequestId,",
        "          militaryStatus,",
        "          mobileNumber,",
        "          oldCsCid,",
        "          oldEbCid,",
        "          oldFaCid,",
        "          oldFlCid,",
        "          oldFlcaCid,",
        "          oldFsCid,",
        "          oldKflCid,",
        "          oldLflCid,",
        "          optIns,",
        "          password,",
        "          passwordChangeDate,",
        "          preferredLanguage,",
        "          preferredStores,",
        "          previousEmail,",
        "          profileStatus,",
        "          region,",
        "          relateCustomerId,",
        "          relateFailure,",
        "          retailStoreId,",
        "          schDefaultBillingAddressLine1,",
        "          schDefaultShippingAddressLine1,",
        "          storeNumber,",
        "          streetAddress,",
        "          token,",
        "          updateTs,",
        "          updateTsExceptLogin,",
        "          vipInfo,",
        "          webhookMessageStatus,",
        "          xstoreId,",
        "          zipCode,",
        "          id",
        "     ),",
        "     skipDuplicateMapInputs: true,",
        "     skipDuplicateMapOutputs: true) ~> removeCaCols",
        "NaRetainedProfiles, CaRetainedProfiles exists(NaProfile@email == CaProfile@email,",
        "     negate:true,",
        "     broadcast: 'auto')~> NaRetainedProfilesDoesNotExistInCaRetainedProfiles",
        "NaJoinCaRetainedProfiles select(mapColumn(",
        "          email = NaProfile@email,",
        "          naCustomerId = NaProfile@customerId,",
        "          naJanrainUuid = NaProfile@janrainUuid,",
        "          caCustomerId = SelectPrefLangAndVipinfoFromCa@customerId,",
        "          caJanrainUuid = SelectPrefLangAndVipinfoFromCa@janrainUuid",
        "     ),",
        "     skipDuplicateMapInputs: true,",
        "     skipDuplicateMapOutputs: true) ~> selectColsForCommonProfileContainer",
        "CaRetainedProfilesDoesNotExistsInNaRetainedProfiles select(mapColumn(",
        "          bannerOfOrigin,",
        "          birthday,",
        "          changedBy,",
        "          changedFields,",
        "          country,",
        "          created,",
        "          createdBy,",
        "          csaInfo,",
        "          customerFlag,",
        "          customerId,",
        "          customerSyncStatus,",
        "          email,",
        "          emailHistory,",
        "          emailVerified,",
        "          enrollmentSource,",
        "          event,",
        "          failedLoginAttempts,",
        "          firstName,",
        "          flxInfo,",
        "          fraudFlag,",
        "          gender,",
        "          homeNumber,",
        "          id,",
        "          inStoreSignUp,",
        "          isRegistered,",
        "          janrainUuid,",
        "          lastFailedLogin,",
        "          lastLogin,",
        "          lastName,",
        "          militaryExpiryDate,",
        "          militaryRequestId,",
        "          militaryStatus,",
        "          mobileNumber,",
        "          oldCsCid,",
        "          oldEbCid,",
        "          oldFaCid,",
        "          oldFlCid,",
        "          oldFlcaCid,",
        "          oldFsCid,",
        "          oldKflCid,",
        "          oldLflCid,",
        "          optIns,",
        "          password,",
        "          passwordChangeDate,",
        "          preferredLanguage,",
        "          previousEmail,",
        "          profileStatus,",
        "          region,",
        "          relateCustomerId,",
        "          relateFailure,",
        "          retailStoreId,",
        "          schDefaultBillingAddressLine1,",
        "          schDefaultShippingAddressLine1,",
        "          storeNumber,",
        "          streetAddress,",
        "          token,",
        "          updateTs,",
        "          updateTsExceptLogin,",
        "          vipInfo,",
        "          webhookMessageStatus,",
        "          xstoreId,",
        "          zipCode",
        "     ),",
        "     skipDuplicateMapInputs: true,",
        "     skipDuplicateMapOutputs: true) ~> removeCaPreferredStores",
        "NaUnionCaRetainedProfiles sink(allowSchemaDrift: true,",
        "     validateSchema: false,",
        "     input(",
        "          updateTs as long,",
        "          firstName as string,",
        "          lastName as string,",
        "          email as string,",
        "          profileStatus as string,",
        "          token as string,",
        "          emailHistory as (emailAddress as string, modificationTS as string)[],",
        "          customerId as string,",
        "          preferredStores as (CS as (city as string, country as string, division as string, isocodeShort as string, latitude as double, line1 as string, line2 as string, longitude as double, name as string, phone as string, state as string, status as string, storeId as string, zipcode as string), FA as (city as string, country as string, division as string, isocodeShort as string, latitude as double, line1 as string, line2 as string, longitude as double, name as string, phone as string, state as string, status as string, storeId as string, zipcode as string), FL as (city as string, country as string, division as string, isocodeShort as string, latitude as double, line1 as string, line2 as string, longitude as double, name as string, phone as string, state as string, status as string, storeId as string, zipcode as string), KFL as (city as string, country as string, division as string, isocodeShort as string, latitude as double, line1 as string, line2 as string, longitude as double, name as string, phone as string, state as string, status as string, storeId as string, zipcode as string), LFL as (city as string, country as string, division as string, isocodeShort as string, latitude as double, line1 as string, line2 as string, longitude as double, name as string, phone as string, state as string, status as string, storeId as string, zipcode as string)),",
        "          mobileNumber as long,",
        "          homeNumber as long,",
        "          isRegistered as boolean,",
        "          zipCode as string,",
        "          schDefaultBillingAddressLine1 as string,",
        "          schDefaultShippingAddressLine1 as string,",
        "          region as string,",
        "          webhookMessageStatus as string,",
        "          janrainUuid as string,",
        "          oldFlCid as string,",
        "          oldKflCid as string,",
        "          oldLflCid as string,",
        "          oldFsCid as string,",
        "          oldFaCid as string,",
        "          oldCsCid as string,",
        "          oldFlcaCid as string,",
        "          oldEbCid as string,",
        "          fraudFlag as string[],",
        "          bannerOfOrigin as string,",
        "          emailVerified as long,",
        "          militaryStatus as string,",
        "          militaryRequestId as string,",
        "          militaryExpiryDate as string,",
        "          storeNumber as string,",
        "          previousEmail as string,",
        "          password as string,",
        "          flxInfo as (flxEmailOptIn as boolean, loyaltyFlxEmailOptInBanner as string, loyaltyStatus as boolean, points as integer, tier as string, flxNumber as long, ctNumber as integer, flxTcVersion as string, referralCode as string),",
        "          optIns as (banner as string)[],",
        "          created as long,",
        "          birthday as string,",
        "          inStoreSignUp as boolean,",
        "          createdBy as string,",
        "          xstoreId as string,",
        "          retailStoreId as integer,",
        "          relateFailure as boolean,",
        "          changedFields as string,",
        "          csaInfo as (csaAgentEmail as string, zendeskTicketNumber as string),",
        "          customerFlag as string,",
        "          enrollmentSource as string,",
        "          event as string,",
        "          changedBy as string,",
        "          vipInfo as (dollarsNeedToSpend as (currencyIso as string, formattedValue as string, value as double), loyaltyMinThreshold as (currencyIso as string, formattedValue as string, value as double), dollarsSpent as (currencyIso as string, formattedValue as string, value as double), loyaltyTargetThreshold as (currencyIso as string, formattedValue as string, value as double), vipNumber as string, lastLevelUpdateDateHyb as long, lastLevelMoveDate as long, loyaltyExpireDate as long, isVip as boolean, lifeTimePoints as long, status as string),",
        "          preferredLanguage as string,",
        "          lastLogin as string,",
        "          lastFailedLogin as string,",
        "          passwordChangeDate as string,",
        "          failedLoginAttempts as long,",
        "          streetAddress as string,",
        "          country as string,",
        "          gender as string,",
        "          customerSyncStatus as (status as string, updateTs as long, process as string),",
        "          updateTsExceptLogin as long,",
        "          relateCustomerId as string",
        "     ),",
        "     deletable:false,",
        "     insertable:true,",
        "     updateable:false,",
        "     upsertable:false,",
        "     recreate:true,",
        "     format: 'document',",
        "     batchSize: 5000,",
        "     partitionKey: ['/id'],",
        "     throughput: 10000,",
        "     skipDuplicateMapInputs: true,",
        "     skipDuplicateMapOutputs: true,",
        "     saveOrder: 1) ~> SinkGlobalProfile",
        "NaRetainedProfiles sink(allowSchemaDrift: true,",
        "     validateSchema: false,",
        "     deletable:false,",
        "     insertable:true,",
        "     updateable:false,",
        "     upsertable:false,",
        "     recreate:true,",
        "     format: 'document',",
        "     batchSize: 5000,",
        "     partitionKey: ['/id'],",
        "     throughput: 10000,",
        "     skipDuplicateMapInputs: true,",
        "     skipDuplicateMapOutputs: true,",
        "     saveOrder: 1) ~> SinkNaProfileRetained",
        "CaRetainedProfilesDoesNotExistsInNaRetainedProfiles sink(allowSchemaDrift: true,",
        "     validateSchema: false,",
        "     deletable:false,",
        "     insertable:true,",
        "     updateable:false,",
        "     upsertable:false,",
        "     recreate:true,",
        "     format: 'document',",
        "     batchSize: 5000,",
        "     partitionKey: ['/id'],",
        "     throughput: 10000,",
        "     skipDuplicateMapInputs: true,",
        "     skipDuplicateMapOutputs: true,",
        "     saveOrder: 1) ~> SinkCaProfileRetained",
        "removeCaCols sink(allowSchemaDrift: true,",
        "     validateSchema: false,",
        "     input(",
        "          updateTs as long,",
        "          firstName as string,",
        "          lastName as string,",
        "          email as string,",
        "          profileStatus as string,",
        "          token as string,",
        "          emailHistory as (emailAddress as string, modificationTS as string)[],",
        "          customerId as string,",
        "          preferredStores as (CS as (city as string, country as string, division as string, isocodeShort as string, latitude as double, line1 as string, line2 as string, longitude as double, name as string, phone as string, state as string, status as string, storeId as string, zipcode as string), FA as (city as string, country as string, division as string, isocodeShort as string, latitude as double, line1 as string, line2 as string, longitude as double, name as string, phone as string, state as string, status as string, storeId as string, zipcode as string), FL as (city as string, country as string, division as string, isocodeShort as string, latitude as double, line1 as string, line2 as string, longitude as double, name as string, phone as string, state as string, status as string, storeId as string, zipcode as string), KFL as (city as string, country as string, division as string, isocodeShort as string, latitude as double, line1 as string, line2 as string, longitude as double, name as string, phone as string, state as string, status as string, storeId as string, zipcode as string), LFL as (city as string, country as string, division as string, isocodeShort as string, latitude as double, line1 as string, line2 as string, longitude as double, name as string, phone as string, state as string, status as string, storeId as string, zipcode as string)),",
        "          mobileNumber as long,",
        "          homeNumber as long,",
        "          isRegistered as boolean,",
        "          zipCode as string,",
        "          schDefaultBillingAddressLine1 as string,",
        "          schDefaultShippingAddressLine1 as string,",
        "          region as string,",
        "          webhookMessageStatus as string,",
        "          janrainUuid as string,",
        "          oldFlCid as string,",
        "          oldKflCid as string,",
        "          oldLflCid as string,",
        "          oldFsCid as string,",
        "          oldFaCid as string,",
        "          oldCsCid as string,",
        "          oldFlcaCid as string,",
        "          oldEbCid as string,",
        "          fraudFlag as string[],",
        "          bannerOfOrigin as string,",
        "          emailVerified as long,",
        "          militaryStatus as string,",
        "          militaryRequestId as string,",
        "          militaryExpiryDate as string,",
        "          storeNumber as string,",
        "          previousEmail as string,",
        "          password as string,",
        "          flxInfo as (flxEmailOptIn as boolean, loyaltyFlxEmailOptInBanner as string, loyaltyStatus as boolean, points as integer, tier as string, flxNumber as long, ctNumber as integer, flxTcVersion as string, referralCode as string),",
        "          optIns as (banner as string)[],",
        "          created as long,",
        "          birthday as string,",
        "          inStoreSignUp as boolean,",
        "          createdBy as string,",
        "          xstoreId as string,",
        "          retailStoreId as integer,",
        "          relateFailure as boolean,",
        "          changedFields as string,",
        "          csaInfo as (csaAgentEmail as string, zendeskTicketNumber as string),",
        "          customerFlag as string,",
        "          enrollmentSource as string,",
        "          event as string,",
        "          changedBy as string,",
        "          vipInfo as (dollarsNeedToSpend as (currencyIso as string, formattedValue as string, value as double), loyaltyMinThreshold as (currencyIso as string, formattedValue as string, value as double), dollarsSpent as (currencyIso as string, formattedValue as string, value as double), loyaltyTargetThreshold as (currencyIso as string, formattedValue as string, value as double), vipNumber as string, lastLevelUpdateDateHyb as long, lastLevelMoveDate as long, loyaltyExpireDate as long, isVip as boolean, lifeTimePoints as long, status as string),",
        "          preferredLanguage as string,",
        "          lastLogin as string,",
        "          lastFailedLogin as string,",
        "          passwordChangeDate as string,",
        "          failedLoginAttempts as long,",
        "          streetAddress as string,",
        "          country as string,",
        "          gender as string,",
        "          customerSyncStatus as (status as string, updateTs as long, process as string),",
        "          updateTsExceptLogin as long,",
        "          relateCustomerId as string",
        "     ),",
        "     deletable:false,",
        "     insertable:true,",
        "     updateable:false,",
        "     upsertable:false,",
        "     format: 'document',",
        "     batchSize: 5000,",
        "     partitionKey: ['/id'],",
        "     throughput: 10000,",
        "     skipDuplicateMapInputs: true,",
        "     skipDuplicateMapOutputs: true,",
        "     saveOrder: 2) ~> sinkCommonProfiles",
        "selectColsForCommonProfileContainer sink(allowSchemaDrift: true,",
        "     validateSchema: false,",
        "     input(",
        "          updateTs as long,",
        "          firstName as string,",
        "          lastName as string,",
        "          email as string,",
        "          profileStatus as string,",
        "          token as string,",
        "          emailHistory as (emailAddress as string, modificationTS as string)[],",
        "          customerId as string,",
        "          preferredStores as (CS as (city as string, country as string, division as string, isocodeShort as string, latitude as double, line1 as string, line2 as string, longitude as double, name as string, phone as string, state as string, status as string, storeId as string, zipcode as string), FA as (city as string, country as string, division as string, isocodeShort as string, latitude as double, line1 as string, line2 as string, longitude as double, name as string, phone as string, state as string, status as string, storeId as string, zipcode as string), FL as (city as string, country as string, division as string, isocodeShort as string, latitude as double, line1 as string, line2 as string, longitude as double, name as string, phone as string, state as string, status as string, storeId as string, zipcode as string), KFL as (city as string, country as string, division as string, isocodeShort as string, latitude as double, line1 as string, line2 as string, longitude as double, name as string, phone as string, state as string, status as string, storeId as string, zipcode as string), LFL as (city as string, country as string, division as string, isocodeShort as string, latitude as double, line1 as string, line2 as string, longitude as double, name as string, phone as string, state as string, status as string, storeId as string, zipcode as string)),",
        "          mobileNumber as long,",
        "          homeNumber as long,",
        "          isRegistered as boolean,",
        "          zipCode as string,",
        "          schDefaultBillingAddressLine1 as string,",
        "          schDefaultShippingAddressLine1 as string,",
        "          region as string,",
        "          webhookMessageStatus as string,",
        "          janrainUuid as string,",
        "          oldFlCid as string,",
        "          oldKflCid as string,",
        "          oldLflCid as string,",
        "          oldFsCid as string,",
        "          oldFaCid as string,",
        "          oldCsCid as string,",
        "          oldFlcaCid as string,",
        "          oldEbCid as string,",
        "          fraudFlag as string[],",
        "          bannerOfOrigin as string,",
        "          emailVerified as long,",
        "          militaryStatus as string,",
        "          militaryRequestId as string,",
        "          militaryExpiryDate as string,",
        "          storeNumber as string,",
        "          previousEmail as string,",
        "          password as string,",
        "          flxInfo as (flxEmailOptIn as boolean, loyaltyFlxEmailOptInBanner as string, loyaltyStatus as boolean, points as integer, tier as string, flxNumber as long, ctNumber as integer, flxTcVersion as string, referralCode as string),",
        "          optIns as (banner as string)[],",
        "          created as long,",
        "          birthday as string,",
        "          inStoreSignUp as boolean,",
        "          createdBy as string,",
        "          xstoreId as string,",
        "          retailStoreId as integer,",
        "          relateFailure as boolean,",
        "          changedFields as string,",
        "          csaInfo as (csaAgentEmail as string, zendeskTicketNumber as string),",
        "          customerFlag as string,",
        "          enrollmentSource as string,",
        "          event as string,",
        "          changedBy as string,",
        "          vipInfo as (dollarsNeedToSpend as (currencyIso as string, formattedValue as string, value as double), loyaltyMinThreshold as (currencyIso as string, formattedValue as string, value as double), dollarsSpent as (currencyIso as string, formattedValue as string, value as double), loyaltyTargetThreshold as (currencyIso as string, formattedValue as string, value as double), vipNumber as string, lastLevelUpdateDateHyb as long, lastLevelMoveDate as long, loyaltyExpireDate as long, isVip as boolean, lifeTimePoints as long, status as string),",
        "          preferredLanguage as string,",
        "          lastLogin as string,",
        "          lastFailedLogin as string,",
        "          passwordChangeDate as string,",
        "          failedLoginAttempts as long,",
        "          streetAddress as string,",
        "          country as string,",
        "          gender as string,",
        "          customerSyncStatus as (status as string, updateTs as long, process as string),",
        "          updateTsExceptLogin as long,",
        "          relateCustomerId as string",
        "     ),",
        "     deletable:false,",
        "     insertable:true,",
        "     updateable:false,",
        "     upsertable:false,",
        "     recreate:true,",
        "     format: 'document',",
        "     batchSize: 5000,",
        "     partitionKey: ['/id'],",
        "     throughput: 10000,",
        "     skipDuplicateMapInputs: true,",
        "     skipDuplicateMapOutputs: true,",
        "     saveOrder: 1) ~> sinkAtCommonProfilesContainer"
      ]
    }
  }
}